/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the StorageListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageListResult{}

// StorageListResult struct for StorageListResult
type StorageListResult struct {
	Take *int32 `json:"take,omitempty"`
	Skip *int32 `json:"skip,omitempty"`
	Total *int64 `json:"total,omitempty"`
	Data interface{} `json:"data,omitempty"`
	Explain interface{} `json:"explain,omitempty"`
}

// NewStorageListResult instantiates a new StorageListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageListResult() *StorageListResult {
	this := StorageListResult{}
	return &this
}

// NewStorageListResultWithDefaults instantiates a new StorageListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageListResultWithDefaults() *StorageListResult {
	this := StorageListResult{}
	return &this
}

// GetTake returns the Take field value if set, zero value otherwise.
func (o *StorageListResult) GetTake() int32 {
	if o == nil || IsNil(o.Take) {
		var ret int32
		return ret
	}
	return *o.Take
}

// GetTakeOk returns a tuple with the Take field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageListResult) GetTakeOk() (*int32, bool) {
	if o == nil || IsNil(o.Take) {
		return nil, false
	}
	return o.Take, true
}

// HasTake returns a boolean if a field has been set.
func (o *StorageListResult) HasTake() bool {
	if o != nil && !IsNil(o.Take) {
		return true
	}

	return false
}

// SetTake gets a reference to the given int32 and assigns it to the Take field.
func (o *StorageListResult) SetTake(v int32) {
	o.Take = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *StorageListResult) GetSkip() int32 {
	if o == nil || IsNil(o.Skip) {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageListResult) GetSkipOk() (*int32, bool) {
	if o == nil || IsNil(o.Skip) {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *StorageListResult) HasSkip() bool {
	if o != nil && !IsNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *StorageListResult) SetSkip(v int32) {
	o.Skip = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *StorageListResult) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageListResult) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *StorageListResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *StorageListResult) SetTotal(v int64) {
	o.Total = &v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageListResult) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageListResult) GetDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return &o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *StorageListResult) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given interface{} and assigns it to the Data field.
func (o *StorageListResult) SetData(v interface{}) {
	o.Data = v
}

// GetExplain returns the Explain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageListResult) GetExplain() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Explain
}

// GetExplainOk returns a tuple with the Explain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageListResult) GetExplainOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Explain) {
		return nil, false
	}
	return &o.Explain, true
}

// HasExplain returns a boolean if a field has been set.
func (o *StorageListResult) HasExplain() bool {
	if o != nil && !IsNil(o.Explain) {
		return true
	}

	return false
}

// SetExplain gets a reference to the given interface{} and assigns it to the Explain field.
func (o *StorageListResult) SetExplain(v interface{}) {
	o.Explain = v
}

func (o StorageListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Take) {
		toSerialize["take"] = o.Take
	}
	if !IsNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Explain != nil {
		toSerialize["explain"] = o.Explain
	}
	return toSerialize, nil
}

type NullableStorageListResult struct {
	value *StorageListResult
	isSet bool
}

func (v NullableStorageListResult) Get() *StorageListResult {
	return v.value
}

func (v *NullableStorageListResult) Set(val *StorageListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageListResult(val *StorageListResult) *NullableStorageListResult {
	return &NullableStorageListResult{value: val, isSet: true}
}

func (v NullableStorageListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


