/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the CurrencyTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyTransaction{}

// CurrencyTransaction 货币交易记录实体，用于记录用户的货币交易详情。
type CurrencyTransaction struct {
	// 货币交易记录的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 发起交易的发送方用户ID，若为转账交易时必填。
	FromUserID *int64 `json:"fromUserID,omitempty"`
	// 进行货币交易的用户ID。
	UserID *int64 `json:"userID,omitempty"`
	// 货币交易的类型，例如 '消费', '奖励', '兑换', '转账' 等。
	TransactionType NullableString `json:"transactionType,omitempty"`
	// 交易的货币类型，例如 'USD', 'CNY' 等。
	CurrencyType NullableString `json:"currencyType,omitempty"`
	// 货币的变动数量，正数表示增加，负数表示减少。
	CurrencyChange *int64 `json:"currencyChange,omitempty"`
	// 交易完成后的货币余额。
	CurrencyBalance *float64 `json:"currencyBalance,omitempty"`
	// 描述货币变动的具体原因或相关交易详情。
	Description NullableString `json:"description,omitempty"`
	// 货币交易的当前状态，例如 '成功', '失败', '待审核' 等。
	Status NullableString `json:"status,omitempty"`
	// 交易的额外信息或管理员的备注。
	Remark NullableString `json:"remark,omitempty"`
	// 用于分类或标记交易的标签。
	Tags NullableString `json:"tags,omitempty"`
	// 货币交易发生的时间，默认为当前时间。
	CreateDate *time.Time `json:"createDate,omitempty"`
}

// NewCurrencyTransaction instantiates a new CurrencyTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyTransaction() *CurrencyTransaction {
	this := CurrencyTransaction{}
	return &this
}

// NewCurrencyTransactionWithDefaults instantiates a new CurrencyTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyTransactionWithDefaults() *CurrencyTransaction {
	this := CurrencyTransaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CurrencyTransaction) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyTransaction) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CurrencyTransaction) SetId(v int64) {
	o.Id = &v
}

// GetFromUserID returns the FromUserID field value if set, zero value otherwise.
func (o *CurrencyTransaction) GetFromUserID() int64 {
	if o == nil || IsNil(o.FromUserID) {
		var ret int64
		return ret
	}
	return *o.FromUserID
}

// GetFromUserIDOk returns a tuple with the FromUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyTransaction) GetFromUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.FromUserID) {
		return nil, false
	}
	return o.FromUserID, true
}

// HasFromUserID returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasFromUserID() bool {
	if o != nil && !IsNil(o.FromUserID) {
		return true
	}

	return false
}

// SetFromUserID gets a reference to the given int64 and assigns it to the FromUserID field.
func (o *CurrencyTransaction) SetFromUserID(v int64) {
	o.FromUserID = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *CurrencyTransaction) GetUserID() int64 {
	if o == nil || IsNil(o.UserID) {
		var ret int64
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyTransaction) GetUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given int64 and assigns it to the UserID field.
func (o *CurrencyTransaction) SetUserID(v int64) {
	o.UserID = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyTransaction) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionType.Get()
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyTransaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionType.Get(), o.TransactionType.IsSet()
}

// HasTransactionType returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasTransactionType() bool {
	if o != nil && o.TransactionType.IsSet() {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given NullableString and assigns it to the TransactionType field.
func (o *CurrencyTransaction) SetTransactionType(v string) {
	o.TransactionType.Set(&v)
}
// SetTransactionTypeNil sets the value for TransactionType to be an explicit nil
func (o *CurrencyTransaction) SetTransactionTypeNil() {
	o.TransactionType.Set(nil)
}

// UnsetTransactionType ensures that no value is present for TransactionType, not even an explicit nil
func (o *CurrencyTransaction) UnsetTransactionType() {
	o.TransactionType.Unset()
}

// GetCurrencyType returns the CurrencyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyTransaction) GetCurrencyType() string {
	if o == nil || IsNil(o.CurrencyType.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyType.Get()
}

// GetCurrencyTypeOk returns a tuple with the CurrencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyTransaction) GetCurrencyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyType.Get(), o.CurrencyType.IsSet()
}

// HasCurrencyType returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasCurrencyType() bool {
	if o != nil && o.CurrencyType.IsSet() {
		return true
	}

	return false
}

// SetCurrencyType gets a reference to the given NullableString and assigns it to the CurrencyType field.
func (o *CurrencyTransaction) SetCurrencyType(v string) {
	o.CurrencyType.Set(&v)
}
// SetCurrencyTypeNil sets the value for CurrencyType to be an explicit nil
func (o *CurrencyTransaction) SetCurrencyTypeNil() {
	o.CurrencyType.Set(nil)
}

// UnsetCurrencyType ensures that no value is present for CurrencyType, not even an explicit nil
func (o *CurrencyTransaction) UnsetCurrencyType() {
	o.CurrencyType.Unset()
}

// GetCurrencyChange returns the CurrencyChange field value if set, zero value otherwise.
func (o *CurrencyTransaction) GetCurrencyChange() int64 {
	if o == nil || IsNil(o.CurrencyChange) {
		var ret int64
		return ret
	}
	return *o.CurrencyChange
}

// GetCurrencyChangeOk returns a tuple with the CurrencyChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyTransaction) GetCurrencyChangeOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrencyChange) {
		return nil, false
	}
	return o.CurrencyChange, true
}

// HasCurrencyChange returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasCurrencyChange() bool {
	if o != nil && !IsNil(o.CurrencyChange) {
		return true
	}

	return false
}

// SetCurrencyChange gets a reference to the given int64 and assigns it to the CurrencyChange field.
func (o *CurrencyTransaction) SetCurrencyChange(v int64) {
	o.CurrencyChange = &v
}

// GetCurrencyBalance returns the CurrencyBalance field value if set, zero value otherwise.
func (o *CurrencyTransaction) GetCurrencyBalance() float64 {
	if o == nil || IsNil(o.CurrencyBalance) {
		var ret float64
		return ret
	}
	return *o.CurrencyBalance
}

// GetCurrencyBalanceOk returns a tuple with the CurrencyBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyTransaction) GetCurrencyBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrencyBalance) {
		return nil, false
	}
	return o.CurrencyBalance, true
}

// HasCurrencyBalance returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasCurrencyBalance() bool {
	if o != nil && !IsNil(o.CurrencyBalance) {
		return true
	}

	return false
}

// SetCurrencyBalance gets a reference to the given float64 and assigns it to the CurrencyBalance field.
func (o *CurrencyTransaction) SetCurrencyBalance(v float64) {
	o.CurrencyBalance = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyTransaction) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CurrencyTransaction) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CurrencyTransaction) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CurrencyTransaction) UnsetDescription() {
	o.Description.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyTransaction) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyTransaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CurrencyTransaction) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CurrencyTransaction) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CurrencyTransaction) UnsetStatus() {
	o.Status.Unset()
}

// GetRemark returns the Remark field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyTransaction) GetRemark() string {
	if o == nil || IsNil(o.Remark.Get()) {
		var ret string
		return ret
	}
	return *o.Remark.Get()
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyTransaction) GetRemarkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remark.Get(), o.Remark.IsSet()
}

// HasRemark returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasRemark() bool {
	if o != nil && o.Remark.IsSet() {
		return true
	}

	return false
}

// SetRemark gets a reference to the given NullableString and assigns it to the Remark field.
func (o *CurrencyTransaction) SetRemark(v string) {
	o.Remark.Set(&v)
}
// SetRemarkNil sets the value for Remark to be an explicit nil
func (o *CurrencyTransaction) SetRemarkNil() {
	o.Remark.Set(nil)
}

// UnsetRemark ensures that no value is present for Remark, not even an explicit nil
func (o *CurrencyTransaction) UnsetRemark() {
	o.Remark.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyTransaction) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyTransaction) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *CurrencyTransaction) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *CurrencyTransaction) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *CurrencyTransaction) UnsetTags() {
	o.Tags.Unset()
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *CurrencyTransaction) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyTransaction) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *CurrencyTransaction) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *CurrencyTransaction) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

func (o CurrencyTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FromUserID) {
		toSerialize["fromUserID"] = o.FromUserID
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if o.TransactionType.IsSet() {
		toSerialize["transactionType"] = o.TransactionType.Get()
	}
	if o.CurrencyType.IsSet() {
		toSerialize["currencyType"] = o.CurrencyType.Get()
	}
	if !IsNil(o.CurrencyChange) {
		toSerialize["currencyChange"] = o.CurrencyChange
	}
	if !IsNil(o.CurrencyBalance) {
		toSerialize["currencyBalance"] = o.CurrencyBalance
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Remark.IsSet() {
		toSerialize["remark"] = o.Remark.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	return toSerialize, nil
}

type NullableCurrencyTransaction struct {
	value *CurrencyTransaction
	isSet bool
}

func (v NullableCurrencyTransaction) Get() *CurrencyTransaction {
	return v.value
}

func (v *NullableCurrencyTransaction) Set(val *CurrencyTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyTransaction(val *CurrencyTransaction) *NullableCurrencyTransaction {
	return &NullableCurrencyTransaction{value: val, isSet: true}
}

func (v NullableCurrencyTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


