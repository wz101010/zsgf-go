/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppSettingAPIService AppSettingAPI service
type AppSettingAPIService service

type ApiAppServiceSettingGroupRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppServiceSettingGroupRequest) Execute() (*ServiceGroupApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingGroupExecute(r)
}

/*
AppServiceSettingGroup 获取服务分组详情

根据服务分组ID获取服务分组详情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务分组ID
 @param appKey
 @return ApiAppServiceSettingGroupRequest
*/
func (a *AppSettingAPIService) AppServiceSettingGroup(ctx context.Context, id int64, appKey string) ApiAppServiceSettingGroupRequest {
	return ApiAppServiceSettingGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return ServiceGroupApiResponse
func (a *AppSettingAPIService) AppServiceSettingGroupExecute(r ApiAppServiceSettingGroupRequest) (*ServiceGroupApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceGroupApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingGroupDeleteRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppServiceSettingGroupDeleteRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingGroupDeleteExecute(r)
}

/*
AppServiceSettingGroupDelete 删除服务分组

根据服务分组ID删除服务分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务分组ID
 @param appKey
 @return ApiAppServiceSettingGroupDeleteRequest
*/
func (a *AppSettingAPIService) AppServiceSettingGroupDelete(ctx context.Context, id int64, appKey string) ApiAppServiceSettingGroupDeleteRequest {
	return ApiAppServiceSettingGroupDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppServiceSettingGroupDeleteExecute(r ApiAppServiceSettingGroupDeleteRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingGroupDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingGroupPostRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	serviceGroup *ServiceGroup
}

// 服务分组信息
func (r ApiAppServiceSettingGroupPostRequest) ServiceGroup(serviceGroup ServiceGroup) ApiAppServiceSettingGroupPostRequest {
	r.serviceGroup = &serviceGroup
	return r
}

func (r ApiAppServiceSettingGroupPostRequest) Execute() (*AppSettingGroupPostResultApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingGroupPostExecute(r)
}

/*
AppServiceSettingGroupPost 添加服务分组

添加新的服务分组信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppServiceSettingGroupPostRequest
*/
func (a *AppSettingAPIService) AppServiceSettingGroupPost(ctx context.Context, appKey string) ApiAppServiceSettingGroupPostRequest {
	return ApiAppServiceSettingGroupPostRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AppSettingGroupPostResultApiResponse
func (a *AppSettingAPIService) AppServiceSettingGroupPostExecute(r ApiAppServiceSettingGroupPostRequest) (*AppSettingGroupPostResultApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppSettingGroupPostResultApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingGroupPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Groups"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingGroupPutRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
	serviceGroup *ServiceGroup
}

// 服务分组信息
func (r ApiAppServiceSettingGroupPutRequest) ServiceGroup(serviceGroup ServiceGroup) ApiAppServiceSettingGroupPutRequest {
	r.serviceGroup = &serviceGroup
	return r
}

func (r ApiAppServiceSettingGroupPutRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingGroupPutExecute(r)
}

/*
AppServiceSettingGroupPut 更新服务分组

根据服务分组ID更新服务分组信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务分组ID
 @param appKey
 @return ApiAppServiceSettingGroupPutRequest
*/
func (a *AppSettingAPIService) AppServiceSettingGroupPut(ctx context.Context, id int64, appKey string) ApiAppServiceSettingGroupPutRequest {
	return ApiAppServiceSettingGroupPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppServiceSettingGroupPutExecute(r ApiAppServiceSettingGroupPutRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingGroupPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingGroupsRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	providerId *int64
	showFlag *bool
}

// 服务商ID
func (r ApiAppServiceSettingGroupsRequest) ProviderId(providerId int64) ApiAppServiceSettingGroupsRequest {
	r.providerId = &providerId
	return r
}

// 是否显示
func (r ApiAppServiceSettingGroupsRequest) ShowFlag(showFlag bool) ApiAppServiceSettingGroupsRequest {
	r.showFlag = &showFlag
	return r
}

func (r ApiAppServiceSettingGroupsRequest) Execute() (*ServiceGroupListApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingGroupsExecute(r)
}

/*
AppServiceSettingGroups 获取服务分组列表

根据服务商ID和显示标志获取服务分组列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppServiceSettingGroupsRequest
*/
func (a *AppSettingAPIService) AppServiceSettingGroups(ctx context.Context, appKey string) ApiAppServiceSettingGroupsRequest {
	return ApiAppServiceSettingGroupsRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return ServiceGroupListApiResponse
func (a *AppSettingAPIService) AppServiceSettingGroupsExecute(r ApiAppServiceSettingGroupsRequest) (*ServiceGroupListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceGroupListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Groups"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.providerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerId", r.providerId, "form", "")
	}
	if r.showFlag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showFlag", r.showFlag, "form", "")
	} else {
		var defaultValue bool = false
		r.showFlag = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingItemRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppServiceSettingItemRequest) Execute() (*ServiceItemApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingItemExecute(r)
}

/*
AppServiceSettingItem 服务配置项详情

根据服务配置项ID获取服务配置项详情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务配置项ID
 @param appKey
 @return ApiAppServiceSettingItemRequest
*/
func (a *AppSettingAPIService) AppServiceSettingItem(ctx context.Context, id int64, appKey string) ApiAppServiceSettingItemRequest {
	return ApiAppServiceSettingItemRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return ServiceItemApiResponse
func (a *AppSettingAPIService) AppServiceSettingItemExecute(r ApiAppServiceSettingItemRequest) (*ServiceItemApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceItemApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingItemDeleteRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppServiceSettingItemDeleteRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingItemDeleteExecute(r)
}

/*
AppServiceSettingItemDelete 删除服务配置项

根据服务配置项ID删除服务配置项

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务配置项ID
 @param appKey
 @return ApiAppServiceSettingItemDeleteRequest
*/
func (a *AppSettingAPIService) AppServiceSettingItemDelete(ctx context.Context, id int64, appKey string) ApiAppServiceSettingItemDeleteRequest {
	return ApiAppServiceSettingItemDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppServiceSettingItemDeleteExecute(r ApiAppServiceSettingItemDeleteRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingItemDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingItemPostRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	serviceItem *ServiceItem
}

// 服务配置项信息
func (r ApiAppServiceSettingItemPostRequest) ServiceItem(serviceItem ServiceItem) ApiAppServiceSettingItemPostRequest {
	r.serviceItem = &serviceItem
	return r
}

func (r ApiAppServiceSettingItemPostRequest) Execute() (*AppSettingItemPostResultApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingItemPostExecute(r)
}

/*
AppServiceSettingItemPost 添加服务配置项

添加新的服务配置项信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppServiceSettingItemPostRequest
*/
func (a *AppSettingAPIService) AppServiceSettingItemPost(ctx context.Context, appKey string) ApiAppServiceSettingItemPostRequest {
	return ApiAppServiceSettingItemPostRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AppSettingItemPostResultApiResponse
func (a *AppSettingAPIService) AppServiceSettingItemPostExecute(r ApiAppServiceSettingItemPostRequest) (*AppSettingItemPostResultApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppSettingItemPostResultApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingItemPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingItemPutRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
	serviceItem *ServiceItem
}

// 服务配置项信息
func (r ApiAppServiceSettingItemPutRequest) ServiceItem(serviceItem ServiceItem) ApiAppServiceSettingItemPutRequest {
	r.serviceItem = &serviceItem
	return r
}

func (r ApiAppServiceSettingItemPutRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingItemPutExecute(r)
}

/*
AppServiceSettingItemPut 更新服务配置项

根据服务配置项ID更新服务配置项信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务配置项ID
 @param appKey
 @return ApiAppServiceSettingItemPutRequest
*/
func (a *AppSettingAPIService) AppServiceSettingItemPut(ctx context.Context, id int64, appKey string) ApiAppServiceSettingItemPutRequest {
	return ApiAppServiceSettingItemPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppServiceSettingItemPutExecute(r ApiAppServiceSettingItemPutRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingItemPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingItemsRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	bizCode *string
	providerCode *string
	groupCode *string
	showFlag *bool
}

// 业务代码
func (r ApiAppServiceSettingItemsRequest) BizCode(bizCode string) ApiAppServiceSettingItemsRequest {
	r.bizCode = &bizCode
	return r
}

// 服务商代码
func (r ApiAppServiceSettingItemsRequest) ProviderCode(providerCode string) ApiAppServiceSettingItemsRequest {
	r.providerCode = &providerCode
	return r
}

// 分组代码
func (r ApiAppServiceSettingItemsRequest) GroupCode(groupCode string) ApiAppServiceSettingItemsRequest {
	r.groupCode = &groupCode
	return r
}

// 是否显示
func (r ApiAppServiceSettingItemsRequest) ShowFlag(showFlag bool) ApiAppServiceSettingItemsRequest {
	r.showFlag = &showFlag
	return r
}

func (r ApiAppServiceSettingItemsRequest) Execute() (*ServiceItemListApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingItemsExecute(r)
}

/*
AppServiceSettingItems 服务配置项列表

根据业务代码、服务商代码、分组代码和显示标志获取服务配置项列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppServiceSettingItemsRequest
*/
func (a *AppSettingAPIService) AppServiceSettingItems(ctx context.Context, appKey string) ApiAppServiceSettingItemsRequest {
	return ApiAppServiceSettingItemsRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return ServiceItemListApiResponse
func (a *AppSettingAPIService) AppServiceSettingItemsExecute(r ApiAppServiceSettingItemsRequest) (*ServiceItemListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceItemListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bizCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bizCode", r.bizCode, "form", "")
	}
	if r.providerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerCode", r.providerCode, "form", "")
	}
	if r.groupCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupCode", r.groupCode, "form", "")
	}
	if r.showFlag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showFlag", r.showFlag, "form", "")
	} else {
		var defaultValue bool = false
		r.showFlag = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingProviderRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppServiceSettingProviderRequest) Execute() (*ServiceProviderApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingProviderExecute(r)
}

/*
AppServiceSettingProvider 获取服务商详情

根据服务商ID获取服务商详情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务商ID
 @param appKey
 @return ApiAppServiceSettingProviderRequest
*/
func (a *AppSettingAPIService) AppServiceSettingProvider(ctx context.Context, id int64, appKey string) ApiAppServiceSettingProviderRequest {
	return ApiAppServiceSettingProviderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return ServiceProviderApiResponse
func (a *AppSettingAPIService) AppServiceSettingProviderExecute(r ApiAppServiceSettingProviderRequest) (*ServiceProviderApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceProviderApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingProviderDeleteRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppServiceSettingProviderDeleteRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingProviderDeleteExecute(r)
}

/*
AppServiceSettingProviderDelete 删除服务商

根据服务商ID删除服务商

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务商ID
 @param appKey
 @return ApiAppServiceSettingProviderDeleteRequest
*/
func (a *AppSettingAPIService) AppServiceSettingProviderDelete(ctx context.Context, id int64, appKey string) ApiAppServiceSettingProviderDeleteRequest {
	return ApiAppServiceSettingProviderDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppServiceSettingProviderDeleteExecute(r ApiAppServiceSettingProviderDeleteRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingProviderDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingProviderPostRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	serviceProvider *ServiceProvider
}

// 服务商信息
func (r ApiAppServiceSettingProviderPostRequest) ServiceProvider(serviceProvider ServiceProvider) ApiAppServiceSettingProviderPostRequest {
	r.serviceProvider = &serviceProvider
	return r
}

func (r ApiAppServiceSettingProviderPostRequest) Execute() (*AppSettingProviderPostResultApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingProviderPostExecute(r)
}

/*
AppServiceSettingProviderPost 添加服务商

添加新的服务商信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppServiceSettingProviderPostRequest
*/
func (a *AppSettingAPIService) AppServiceSettingProviderPost(ctx context.Context, appKey string) ApiAppServiceSettingProviderPostRequest {
	return ApiAppServiceSettingProviderPostRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AppSettingProviderPostResultApiResponse
func (a *AppSettingAPIService) AppServiceSettingProviderPostExecute(r ApiAppServiceSettingProviderPostRequest) (*AppSettingProviderPostResultApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppSettingProviderPostResultApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingProviderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Providers"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingProviderPutRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
	serviceProvider *ServiceProvider
}

// 服务商信息
func (r ApiAppServiceSettingProviderPutRequest) ServiceProvider(serviceProvider ServiceProvider) ApiAppServiceSettingProviderPutRequest {
	r.serviceProvider = &serviceProvider
	return r
}

func (r ApiAppServiceSettingProviderPutRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingProviderPutExecute(r)
}

/*
AppServiceSettingProviderPut 更新服务商

根据服务商ID更新服务商信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 服务商ID
 @param appKey
 @return ApiAppServiceSettingProviderPutRequest
*/
func (a *AppSettingAPIService) AppServiceSettingProviderPut(ctx context.Context, id int64, appKey string) ApiAppServiceSettingProviderPutRequest {
	return ApiAppServiceSettingProviderPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppServiceSettingProviderPutExecute(r ApiAppServiceSettingProviderPutRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingProviderPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceProvider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppServiceSettingProvidersRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	bizCode *string
	showFlag *bool
}

// 业务代码
func (r ApiAppServiceSettingProvidersRequest) BizCode(bizCode string) ApiAppServiceSettingProvidersRequest {
	r.bizCode = &bizCode
	return r
}

// 是否显示
func (r ApiAppServiceSettingProvidersRequest) ShowFlag(showFlag bool) ApiAppServiceSettingProvidersRequest {
	r.showFlag = &showFlag
	return r
}

func (r ApiAppServiceSettingProvidersRequest) Execute() (*ServiceProviderListApiResponse, *http.Response, error) {
	return r.ApiService.AppServiceSettingProvidersExecute(r)
}

/*
AppServiceSettingProviders 获取服务商列表

根据业务代码和显示标志获取服务商列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppServiceSettingProvidersRequest
*/
func (a *AppSettingAPIService) AppServiceSettingProviders(ctx context.Context, appKey string) ApiAppServiceSettingProvidersRequest {
	return ApiAppServiceSettingProvidersRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return ServiceProviderListApiResponse
func (a *AppSettingAPIService) AppServiceSettingProvidersExecute(r ApiAppServiceSettingProvidersRequest) (*ServiceProviderListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceProviderListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppServiceSettingProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/Providers"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bizCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bizCode", r.bizCode, "form", "")
	}
	if r.showFlag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showFlag", r.showFlag, "form", "")
	} else {
		var defaultValue bool = false
		r.showFlag = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSettingRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppSettingRequest) Execute() (*AppSettingApiResponse, *http.Response, error) {
	return r.ApiService.AppSettingExecute(r)
}

/*
AppSetting 配置详情

根据配置ID获取配置详情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 配置ID
 @param appKey
 @return ApiAppSettingRequest
*/
func (a *AppSettingAPIService) AppSetting(ctx context.Context, id int64, appKey string) ApiAppSettingRequest {
	return ApiAppSettingRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AppSettingApiResponse
func (a *AppSettingAPIService) AppSettingExecute(r ApiAppSettingRequest) (*AppSettingApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppSettingApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSettingDeleteRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
}

func (r ApiAppSettingDeleteRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppSettingDeleteExecute(r)
}

/*
AppSettingDelete 删除配置

根据配置ID删除配置

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 配置ID
 @param appKey
 @return ApiAppSettingDeleteRequest
*/
func (a *AppSettingAPIService) AppSettingDelete(ctx context.Context, id int64, appKey string) ApiAppSettingDeleteRequest {
	return ApiAppSettingDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppSettingDeleteExecute(r ApiAppSettingDeleteRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppSettingDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSettingPostRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	appSetting *AppSetting
}

// 配置内容
func (r ApiAppSettingPostRequest) AppSetting(appSetting AppSetting) ApiAppSettingPostRequest {
	r.appSetting = &appSetting
	return r
}

func (r ApiAppSettingPostRequest) Execute() (*AppSettingSettingPostResultApiResponse, *http.Response, error) {
	return r.ApiService.AppSettingPostExecute(r)
}

/*
AppSettingPost 增加配置

添加新的配置内容

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppSettingPostRequest
*/
func (a *AppSettingAPIService) AppSettingPost(ctx context.Context, appKey string) ApiAppSettingPostRequest {
	return ApiAppSettingPostRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AppSettingSettingPostResultApiResponse
func (a *AppSettingAPIService) AppSettingPostExecute(r ApiAppSettingPostRequest) (*AppSettingSettingPostResultApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppSettingSettingPostResultApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppSettingPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSettingPutRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	id int64
	appKey string
	appSetting *AppSetting
}

// 配置内容
func (r ApiAppSettingPutRequest) AppSetting(appSetting AppSetting) ApiAppSettingPutRequest {
	r.appSetting = &appSetting
	return r
}

func (r ApiAppSettingPutRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AppSettingPutExecute(r)
}

/*
AppSettingPut 更新配置

根据配置ID更新配置内容

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 配置ID
 @param appKey
 @return ApiAppSettingPutRequest
*/
func (a *AppSettingAPIService) AppSettingPut(ctx context.Context, id int64, appKey string) ApiAppSettingPutRequest {
	return ApiAppSettingPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AppSettingAPIService) AppSettingPutExecute(r ApiAppSettingPutRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppSettingPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSettingsRequest struct {
	ctx context.Context
	ApiService *AppSettingAPIService
	appKey string
	providerCode *string
	groupCode *string
	tag *string
	code *string
}

// 服务商代码
func (r ApiAppSettingsRequest) ProviderCode(providerCode string) ApiAppSettingsRequest {
	r.providerCode = &providerCode
	return r
}

// 分组代码
func (r ApiAppSettingsRequest) GroupCode(groupCode string) ApiAppSettingsRequest {
	r.groupCode = &groupCode
	return r
}

// 标签
func (r ApiAppSettingsRequest) Tag(tag string) ApiAppSettingsRequest {
	r.tag = &tag
	return r
}

// 配置项代码
func (r ApiAppSettingsRequest) Code(code string) ApiAppSettingsRequest {
	r.code = &code
	return r
}

func (r ApiAppSettingsRequest) Execute() (*AppSettingListApiResponse, *http.Response, error) {
	return r.ApiService.AppSettingsExecute(r)
}

/*
AppSettings 配置列表

根据服务商代码、分组代码、标签和配置项代码获取配置列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAppSettingsRequest
*/
func (a *AppSettingAPIService) AppSettings(ctx context.Context, appKey string) ApiAppSettingsRequest {
	return ApiAppSettingsRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AppSettingListApiResponse
func (a *AppSettingAPIService) AppSettingsExecute(r ApiAppSettingsRequest) (*AppSettingListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppSettingListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppSettingAPIService.AppSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppSetting/{appKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.providerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerCode", r.providerCode, "form", "")
	}
	if r.groupCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupCode", r.groupCode, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
