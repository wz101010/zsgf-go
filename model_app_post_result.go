/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the AppPostResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppPostResult{}

// AppPostResult struct for AppPostResult
type AppPostResult struct {
	Id *int64 `json:"id,omitempty"`
	ServerPath NullableString `json:"serverPath,omitempty"`
}

// NewAppPostResult instantiates a new AppPostResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPostResult() *AppPostResult {
	this := AppPostResult{}
	return &this
}

// NewAppPostResultWithDefaults instantiates a new AppPostResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPostResultWithDefaults() *AppPostResult {
	this := AppPostResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppPostResult) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPostResult) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppPostResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AppPostResult) SetId(v int64) {
	o.Id = &v
}

// GetServerPath returns the ServerPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppPostResult) GetServerPath() string {
	if o == nil || IsNil(o.ServerPath.Get()) {
		var ret string
		return ret
	}
	return *o.ServerPath.Get()
}

// GetServerPathOk returns a tuple with the ServerPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppPostResult) GetServerPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerPath.Get(), o.ServerPath.IsSet()
}

// HasServerPath returns a boolean if a field has been set.
func (o *AppPostResult) HasServerPath() bool {
	if o != nil && o.ServerPath.IsSet() {
		return true
	}

	return false
}

// SetServerPath gets a reference to the given NullableString and assigns it to the ServerPath field.
func (o *AppPostResult) SetServerPath(v string) {
	o.ServerPath.Set(&v)
}
// SetServerPathNil sets the value for ServerPath to be an explicit nil
func (o *AppPostResult) SetServerPathNil() {
	o.ServerPath.Set(nil)
}

// UnsetServerPath ensures that no value is present for ServerPath, not even an explicit nil
func (o *AppPostResult) UnsetServerPath() {
	o.ServerPath.Unset()
}

func (o AppPostResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppPostResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ServerPath.IsSet() {
		toSerialize["serverPath"] = o.ServerPath.Get()
	}
	return toSerialize, nil
}

type NullableAppPostResult struct {
	value *AppPostResult
	isSet bool
}

func (v NullableAppPostResult) Get() *AppPostResult {
	return v.value
}

func (v *NullableAppPostResult) Set(val *AppPostResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPostResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPostResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPostResult(val *AppPostResult) *NullableAppPostResult {
	return &NullableAppPostResult{value: val, isSet: true}
}

func (v NullableAppPostResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPostResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


