/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AlipayAPIService AlipayAPI service
type AlipayAPIService service

type ApiAlipayCreateOrderRequest struct {
	ctx context.Context
	ApiService *AlipayAPIService
	appKey string
	alipayCreateOrderRequest *AlipayCreateOrderRequest
}

func (r ApiAlipayCreateOrderRequest) AlipayCreateOrderRequest(alipayCreateOrderRequest AlipayCreateOrderRequest) ApiAlipayCreateOrderRequest {
	r.alipayCreateOrderRequest = &alipayCreateOrderRequest
	return r
}

func (r ApiAlipayCreateOrderRequest) Execute() (*StringApiResponse, *http.Response, error) {
	return r.ApiService.AlipayCreateOrderExecute(r)
}

/*
AlipayCreateOrder 创建订单 - 当面付

创建一个当面付订单，并返回支付二维码。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAlipayCreateOrderRequest
*/
func (a *AlipayAPIService) AlipayCreateOrder(ctx context.Context, appKey string) ApiAlipayCreateOrderRequest {
	return ApiAlipayCreateOrderRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return StringApiResponse
func (a *AlipayAPIService) AlipayCreateOrderExecute(r ApiAlipayCreateOrderRequest) (*StringApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StringApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayAPIService.AlipayCreateOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alipay/{appKey}/CreateOrder"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayCreateOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayCreateOrderPagePayRequest struct {
	ctx context.Context
	ApiService *AlipayAPIService
	appKey string
	alipayCreateOrderPagePayRequest *AlipayCreateOrderPagePayRequest
}

func (r ApiAlipayCreateOrderPagePayRequest) AlipayCreateOrderPagePayRequest(alipayCreateOrderPagePayRequest AlipayCreateOrderPagePayRequest) ApiAlipayCreateOrderPagePayRequest {
	r.alipayCreateOrderPagePayRequest = &alipayCreateOrderPagePayRequest
	return r
}

func (r ApiAlipayCreateOrderPagePayRequest) Execute() (*StringApiResponse, *http.Response, error) {
	return r.ApiService.AlipayCreateOrderPagePayExecute(r)
}

/*
AlipayCreateOrderPagePay 创建订单 - PC支付

创建一个PC支付订单，并返回支付页面。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAlipayCreateOrderPagePayRequest
*/
func (a *AlipayAPIService) AlipayCreateOrderPagePay(ctx context.Context, appKey string) ApiAlipayCreateOrderPagePayRequest {
	return ApiAlipayCreateOrderPagePayRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return StringApiResponse
func (a *AlipayAPIService) AlipayCreateOrderPagePayExecute(r ApiAlipayCreateOrderPagePayRequest) (*StringApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StringApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayAPIService.AlipayCreateOrderPagePay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alipay/{appKey}/CreateOrderPagePay"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayCreateOrderPagePayRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayCreateOrderWapPayRequest struct {
	ctx context.Context
	ApiService *AlipayAPIService
	appKey string
	alipayCreateOrderWapPayRequest *AlipayCreateOrderWapPayRequest
}

func (r ApiAlipayCreateOrderWapPayRequest) AlipayCreateOrderWapPayRequest(alipayCreateOrderWapPayRequest AlipayCreateOrderWapPayRequest) ApiAlipayCreateOrderWapPayRequest {
	r.alipayCreateOrderWapPayRequest = &alipayCreateOrderWapPayRequest
	return r
}

func (r ApiAlipayCreateOrderWapPayRequest) Execute() (*StringApiResponse, *http.Response, error) {
	return r.ApiService.AlipayCreateOrderWapPayExecute(r)
}

/*
AlipayCreateOrderWapPay 创建订单 - WAP支付

创建一个WAP支付订单，并返回支付页面。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAlipayCreateOrderWapPayRequest
*/
func (a *AlipayAPIService) AlipayCreateOrderWapPay(ctx context.Context, appKey string) ApiAlipayCreateOrderWapPayRequest {
	return ApiAlipayCreateOrderWapPayRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return StringApiResponse
func (a *AlipayAPIService) AlipayCreateOrderWapPayExecute(r ApiAlipayCreateOrderWapPayRequest) (*StringApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StringApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayAPIService.AlipayCreateOrderWapPay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alipay/{appKey}/CreateOrderWapPay"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alipayCreateOrderWapPayRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOrderDetailRequest struct {
	ctx context.Context
	ApiService *AlipayAPIService
	appKey string
	orderNo *string
}

// 订单号
func (r ApiAlipayOrderDetailRequest) OrderNo(orderNo string) ApiAlipayOrderDetailRequest {
	r.orderNo = &orderNo
	return r
}

func (r ApiAlipayOrderDetailRequest) Execute() (*AlipayTradeQueryResponseApiResponse, *http.Response, error) {
	return r.ApiService.AlipayOrderDetailExecute(r)
}

/*
AlipayOrderDetail 订单详情

查询订单详情，包括订单状态和支付信息。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAlipayOrderDetailRequest
*/
func (a *AlipayAPIService) AlipayOrderDetail(ctx context.Context, appKey string) ApiAlipayOrderDetailRequest {
	return ApiAlipayOrderDetailRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AlipayTradeQueryResponseApiResponse
func (a *AlipayAPIService) AlipayOrderDetailExecute(r ApiAlipayOrderDetailRequest) (*AlipayTradeQueryResponseApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayTradeQueryResponseApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayAPIService.AlipayOrderDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alipay/{appKey}/OrderDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderNo", r.orderNo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayOrderRefundRequest struct {
	ctx context.Context
	ApiService *AlipayAPIService
	appKey string
	amount *string
	orderNo *string
}

// 退款金额
func (r ApiAlipayOrderRefundRequest) Amount(amount string) ApiAlipayOrderRefundRequest {
	r.amount = &amount
	return r
}

// 订单号
func (r ApiAlipayOrderRefundRequest) OrderNo(orderNo string) ApiAlipayOrderRefundRequest {
	r.orderNo = &orderNo
	return r
}

func (r ApiAlipayOrderRefundRequest) Execute() (*AlipayTradeRefundResponseApiResponse, *http.Response, error) {
	return r.ApiService.AlipayOrderRefundExecute(r)
}

/*
AlipayOrderRefund 订单退款

对指定订单进行退款操作。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAlipayOrderRefundRequest
*/
func (a *AlipayAPIService) AlipayOrderRefund(ctx context.Context, appKey string) ApiAlipayOrderRefundRequest {
	return ApiAlipayOrderRefundRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return AlipayTradeRefundResponseApiResponse
func (a *AlipayAPIService) AlipayOrderRefundExecute(r ApiAlipayOrderRefundRequest) (*AlipayTradeRefundResponseApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlipayTradeRefundResponseApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayAPIService.AlipayOrderRefund")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alipay/{appKey}/OrderRefund"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	if r.orderNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderNo", r.orderNo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlipayReturnPageNotifyRequest struct {
	ctx context.Context
	ApiService *AlipayAPIService
	appKey string
	returnPageNotifyRequest *ReturnPageNotifyRequest
}

func (r ApiAlipayReturnPageNotifyRequest) ReturnPageNotifyRequest(returnPageNotifyRequest ReturnPageNotifyRequest) ApiAlipayReturnPageNotifyRequest {
	r.returnPageNotifyRequest = &returnPageNotifyRequest
	return r
}

func (r ApiAlipayReturnPageNotifyRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.AlipayReturnPageNotifyExecute(r)
}

/*
AlipayReturnPageNotify 支付成功同步通知

处理支付宝支付成功的同步通知。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiAlipayReturnPageNotifyRequest
*/
func (a *AlipayAPIService) AlipayReturnPageNotify(ctx context.Context, appKey string) ApiAlipayReturnPageNotifyRequest {
	return ApiAlipayReturnPageNotifyRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *AlipayAPIService) AlipayReturnPageNotifyExecute(r ApiAlipayReturnPageNotifyRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlipayAPIService.AlipayReturnPageNotify")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Alipay/{appKey}/ReturnPageNotify"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.returnPageNotifyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
