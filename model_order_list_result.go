/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the OrderListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderListResult{}

// OrderListResult struct for OrderListResult
type OrderListResult struct {
	Total *int32 `json:"total,omitempty"`
	Data []Order `json:"data,omitempty"`
}

// NewOrderListResult instantiates a new OrderListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderListResult() *OrderListResult {
	this := OrderListResult{}
	return &this
}

// NewOrderListResultWithDefaults instantiates a new OrderListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderListResultWithDefaults() *OrderListResult {
	this := OrderListResult{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *OrderListResult) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderListResult) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *OrderListResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *OrderListResult) SetTotal(v int32) {
	o.Total = &v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderListResult) GetData() []Order {
	if o == nil {
		var ret []Order
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderListResult) GetDataOk() ([]Order, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *OrderListResult) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Order and assigns it to the Data field.
func (o *OrderListResult) SetData(v []Order) {
	o.Data = v
}

func (o OrderListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableOrderListResult struct {
	value *OrderListResult
	isSet bool
}

func (v NullableOrderListResult) Get() *OrderListResult {
	return v.value
}

func (v *NullableOrderListResult) Set(val *OrderListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderListResult(val *OrderListResult) *NullableOrderListResult {
	return &NullableOrderListResult{value: val, isSet: true}
}

func (v NullableOrderListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


