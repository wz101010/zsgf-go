/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AppSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppSetting{}

// AppSetting 应用设置
type AppSetting struct {
	// 唯一标识
	Id *int64 `json:"id,omitempty"`
	// 提供商代码
	ProviderCode NullableString `json:"providerCode,omitempty"`
	// 分组代码
	GroupCode NullableString `json:"groupCode,omitempty"`
	// 设置项代码
	Code string `json:"code"`
	// 设置值
	Value string `json:"value"`
	// 标签
	Tags NullableString `json:"tags,omitempty"`
	// 描述
	Description NullableString `json:"description,omitempty"`
	// 是否在前端可用
	FrontendUsable *bool `json:"frontendUsable,omitempty"`
	// 创建时间
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 最后更新时间
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

type _AppSetting AppSetting

// NewAppSetting instantiates a new AppSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppSetting(code string, value string) *AppSetting {
	this := AppSetting{}
	this.Code = code
	this.Value = value
	return &this
}

// NewAppSettingWithDefaults instantiates a new AppSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppSettingWithDefaults() *AppSetting {
	this := AppSetting{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppSetting) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSetting) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppSetting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AppSetting) SetId(v int64) {
	o.Id = &v
}

// GetProviderCode returns the ProviderCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppSetting) GetProviderCode() string {
	if o == nil || IsNil(o.ProviderCode.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderCode.Get()
}

// GetProviderCodeOk returns a tuple with the ProviderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppSetting) GetProviderCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderCode.Get(), o.ProviderCode.IsSet()
}

// HasProviderCode returns a boolean if a field has been set.
func (o *AppSetting) HasProviderCode() bool {
	if o != nil && o.ProviderCode.IsSet() {
		return true
	}

	return false
}

// SetProviderCode gets a reference to the given NullableString and assigns it to the ProviderCode field.
func (o *AppSetting) SetProviderCode(v string) {
	o.ProviderCode.Set(&v)
}
// SetProviderCodeNil sets the value for ProviderCode to be an explicit nil
func (o *AppSetting) SetProviderCodeNil() {
	o.ProviderCode.Set(nil)
}

// UnsetProviderCode ensures that no value is present for ProviderCode, not even an explicit nil
func (o *AppSetting) UnsetProviderCode() {
	o.ProviderCode.Unset()
}

// GetGroupCode returns the GroupCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppSetting) GetGroupCode() string {
	if o == nil || IsNil(o.GroupCode.Get()) {
		var ret string
		return ret
	}
	return *o.GroupCode.Get()
}

// GetGroupCodeOk returns a tuple with the GroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppSetting) GetGroupCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupCode.Get(), o.GroupCode.IsSet()
}

// HasGroupCode returns a boolean if a field has been set.
func (o *AppSetting) HasGroupCode() bool {
	if o != nil && o.GroupCode.IsSet() {
		return true
	}

	return false
}

// SetGroupCode gets a reference to the given NullableString and assigns it to the GroupCode field.
func (o *AppSetting) SetGroupCode(v string) {
	o.GroupCode.Set(&v)
}
// SetGroupCodeNil sets the value for GroupCode to be an explicit nil
func (o *AppSetting) SetGroupCodeNil() {
	o.GroupCode.Set(nil)
}

// UnsetGroupCode ensures that no value is present for GroupCode, not even an explicit nil
func (o *AppSetting) UnsetGroupCode() {
	o.GroupCode.Unset()
}

// GetCode returns the Code field value
func (o *AppSetting) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AppSetting) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AppSetting) SetCode(v string) {
	o.Code = v
}

// GetValue returns the Value field value
func (o *AppSetting) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AppSetting) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AppSetting) SetValue(v string) {
	o.Value = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppSetting) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppSetting) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *AppSetting) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *AppSetting) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *AppSetting) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *AppSetting) UnsetTags() {
	o.Tags.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppSetting) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppSetting) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AppSetting) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AppSetting) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AppSetting) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AppSetting) UnsetDescription() {
	o.Description.Unset()
}

// GetFrontendUsable returns the FrontendUsable field value if set, zero value otherwise.
func (o *AppSetting) GetFrontendUsable() bool {
	if o == nil || IsNil(o.FrontendUsable) {
		var ret bool
		return ret
	}
	return *o.FrontendUsable
}

// GetFrontendUsableOk returns a tuple with the FrontendUsable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSetting) GetFrontendUsableOk() (*bool, bool) {
	if o == nil || IsNil(o.FrontendUsable) {
		return nil, false
	}
	return o.FrontendUsable, true
}

// HasFrontendUsable returns a boolean if a field has been set.
func (o *AppSetting) HasFrontendUsable() bool {
	if o != nil && !IsNil(o.FrontendUsable) {
		return true
	}

	return false
}

// SetFrontendUsable gets a reference to the given bool and assigns it to the FrontendUsable field.
func (o *AppSetting) SetFrontendUsable(v bool) {
	o.FrontendUsable = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *AppSetting) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSetting) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *AppSetting) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *AppSetting) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *AppSetting) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSetting) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *AppSetting) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *AppSetting) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o AppSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ProviderCode.IsSet() {
		toSerialize["providerCode"] = o.ProviderCode.Get()
	}
	if o.GroupCode.IsSet() {
		toSerialize["groupCode"] = o.GroupCode.Get()
	}
	toSerialize["code"] = o.Code
	toSerialize["value"] = o.Value
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.FrontendUsable) {
		toSerialize["frontendUsable"] = o.FrontendUsable
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

func (o *AppSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppSetting := _AppSetting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppSetting)

	if err != nil {
		return err
	}

	*o = AppSetting(varAppSetting)

	return err
}

type NullableAppSetting struct {
	value *AppSetting
	isSet bool
}

func (v NullableAppSetting) Get() *AppSetting {
	return v.value
}

func (v *NullableAppSetting) Set(val *AppSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAppSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAppSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppSetting(val *AppSetting) *NullableAppSetting {
	return &NullableAppSetting{value: val, isSet: true}
}

func (v NullableAppSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


