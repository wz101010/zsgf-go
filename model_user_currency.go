/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the UserCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCurrency{}

// UserCurrency 用户资产实体，用于记录用户的货币余额和相关信息。
type UserCurrency struct {
	// 用户资产的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 与用户资产关联的用户ID。
	UserID *int64 `json:"userID,omitempty"`
	// 用户资产的货币代码，例如 'USD', 'CNY' 等。
	CurrencyCode NullableString `json:"currencyCode,omitempty"`
	// 用户的账户余额，表示当前持有的货币数量。
	Balance *int64 `json:"balance,omitempty"`
}

// NewUserCurrency instantiates a new UserCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCurrency() *UserCurrency {
	this := UserCurrency{}
	return &this
}

// NewUserCurrencyWithDefaults instantiates a new UserCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCurrencyWithDefaults() *UserCurrency {
	this := UserCurrency{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserCurrency) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCurrency) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserCurrency) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserCurrency) SetId(v int64) {
	o.Id = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *UserCurrency) GetUserID() int64 {
	if o == nil || IsNil(o.UserID) {
		var ret int64
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCurrency) GetUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *UserCurrency) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given int64 and assigns it to the UserID field.
func (o *UserCurrency) SetUserID(v int64) {
	o.UserID = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserCurrency) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyCode.Get()
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserCurrency) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyCode.Get(), o.CurrencyCode.IsSet()
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *UserCurrency) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given NullableString and assigns it to the CurrencyCode field.
func (o *UserCurrency) SetCurrencyCode(v string) {
	o.CurrencyCode.Set(&v)
}
// SetCurrencyCodeNil sets the value for CurrencyCode to be an explicit nil
func (o *UserCurrency) SetCurrencyCodeNil() {
	o.CurrencyCode.Set(nil)
}

// UnsetCurrencyCode ensures that no value is present for CurrencyCode, not even an explicit nil
func (o *UserCurrency) UnsetCurrencyCode() {
	o.CurrencyCode.Unset()
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *UserCurrency) GetBalance() int64 {
	if o == nil || IsNil(o.Balance) {
		var ret int64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCurrency) GetBalanceOk() (*int64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *UserCurrency) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given int64 and assigns it to the Balance field.
func (o *UserCurrency) SetBalance(v int64) {
	o.Balance = &v
}

func (o UserCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if o.CurrencyCode.IsSet() {
		toSerialize["currencyCode"] = o.CurrencyCode.Get()
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableUserCurrency struct {
	value *UserCurrency
	isSet bool
}

func (v NullableUserCurrency) Get() *UserCurrency {
	return v.value
}

func (v *NullableUserCurrency) Set(val *UserCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCurrency(val *UserCurrency) *NullableUserCurrency {
	return &NullableUserCurrency{value: val, isSet: true}
}

func (v NullableUserCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


