/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the AppCheckVersionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppCheckVersionResult{}

// AppCheckVersionResult struct for AppCheckVersionResult
type AppCheckVersionResult struct {
	Versions []string `json:"versions,omitempty"`
	NewVersions []string `json:"newVersions,omitempty"`
}

// NewAppCheckVersionResult instantiates a new AppCheckVersionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppCheckVersionResult() *AppCheckVersionResult {
	this := AppCheckVersionResult{}
	return &this
}

// NewAppCheckVersionResultWithDefaults instantiates a new AppCheckVersionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppCheckVersionResultWithDefaults() *AppCheckVersionResult {
	this := AppCheckVersionResult{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppCheckVersionResult) GetVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppCheckVersionResult) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *AppCheckVersionResult) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *AppCheckVersionResult) SetVersions(v []string) {
	o.Versions = v
}

// GetNewVersions returns the NewVersions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppCheckVersionResult) GetNewVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NewVersions
}

// GetNewVersionsOk returns a tuple with the NewVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppCheckVersionResult) GetNewVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.NewVersions) {
		return nil, false
	}
	return o.NewVersions, true
}

// HasNewVersions returns a boolean if a field has been set.
func (o *AppCheckVersionResult) HasNewVersions() bool {
	if o != nil && !IsNil(o.NewVersions) {
		return true
	}

	return false
}

// SetNewVersions gets a reference to the given []string and assigns it to the NewVersions field.
func (o *AppCheckVersionResult) SetNewVersions(v []string) {
	o.NewVersions = v
}

func (o AppCheckVersionResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppCheckVersionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	if o.NewVersions != nil {
		toSerialize["newVersions"] = o.NewVersions
	}
	return toSerialize, nil
}

type NullableAppCheckVersionResult struct {
	value *AppCheckVersionResult
	isSet bool
}

func (v NullableAppCheckVersionResult) Get() *AppCheckVersionResult {
	return v.value
}

func (v *NullableAppCheckVersionResult) Set(val *AppCheckVersionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAppCheckVersionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAppCheckVersionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppCheckVersionResult(val *AppCheckVersionResult) *NullableAppCheckVersionResult {
	return &NullableAppCheckVersionResult{value: val, isSet: true}
}

func (v NullableAppCheckVersionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppCheckVersionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


