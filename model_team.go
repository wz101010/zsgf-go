/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the Team type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Team{}

// Team 团队
type Team struct {
	// ID
	Id *int64 `json:"id,omitempty"`
	// 用户ID
	UserID *int64 `json:"userID,omitempty"`
	// 渠道代码
	ChannelCode NullableString `json:"channelCode,omitempty"`
	// 渠道应用ID
	ChannelAppID NullableString `json:"channelAppID,omitempty"`
	// 角色
	Role NullableString `json:"role,omitempty"`
	// 权限
	Permission NullableString `json:"permission,omitempty"`
	// 是否显示
	Show *bool `json:"show,omitempty"`
	// 显示顺序
	ShowIndex *int64 `json:"showIndex,omitempty"`
	// 创建日期
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 最后更新日期
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam() *Team {
	this := Team{}
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Team) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Team) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Team) SetId(v int64) {
	o.Id = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *Team) GetUserID() int64 {
	if o == nil || IsNil(o.UserID) {
		var ret int64
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *Team) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given int64 and assigns it to the UserID field.
func (o *Team) SetUserID(v int64) {
	o.UserID = &v
}

// GetChannelCode returns the ChannelCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetChannelCode() string {
	if o == nil || IsNil(o.ChannelCode.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelCode.Get()
}

// GetChannelCodeOk returns a tuple with the ChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetChannelCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelCode.Get(), o.ChannelCode.IsSet()
}

// HasChannelCode returns a boolean if a field has been set.
func (o *Team) HasChannelCode() bool {
	if o != nil && o.ChannelCode.IsSet() {
		return true
	}

	return false
}

// SetChannelCode gets a reference to the given NullableString and assigns it to the ChannelCode field.
func (o *Team) SetChannelCode(v string) {
	o.ChannelCode.Set(&v)
}
// SetChannelCodeNil sets the value for ChannelCode to be an explicit nil
func (o *Team) SetChannelCodeNil() {
	o.ChannelCode.Set(nil)
}

// UnsetChannelCode ensures that no value is present for ChannelCode, not even an explicit nil
func (o *Team) UnsetChannelCode() {
	o.ChannelCode.Unset()
}

// GetChannelAppID returns the ChannelAppID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetChannelAppID() string {
	if o == nil || IsNil(o.ChannelAppID.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelAppID.Get()
}

// GetChannelAppIDOk returns a tuple with the ChannelAppID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetChannelAppIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelAppID.Get(), o.ChannelAppID.IsSet()
}

// HasChannelAppID returns a boolean if a field has been set.
func (o *Team) HasChannelAppID() bool {
	if o != nil && o.ChannelAppID.IsSet() {
		return true
	}

	return false
}

// SetChannelAppID gets a reference to the given NullableString and assigns it to the ChannelAppID field.
func (o *Team) SetChannelAppID(v string) {
	o.ChannelAppID.Set(&v)
}
// SetChannelAppIDNil sets the value for ChannelAppID to be an explicit nil
func (o *Team) SetChannelAppIDNil() {
	o.ChannelAppID.Set(nil)
}

// UnsetChannelAppID ensures that no value is present for ChannelAppID, not even an explicit nil
func (o *Team) UnsetChannelAppID() {
	o.ChannelAppID.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *Team) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *Team) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *Team) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *Team) UnsetRole() {
	o.Role.Unset()
}

// GetPermission returns the Permission field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetPermission() string {
	if o == nil || IsNil(o.Permission.Get()) {
		var ret string
		return ret
	}
	return *o.Permission.Get()
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetPermissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permission.Get(), o.Permission.IsSet()
}

// HasPermission returns a boolean if a field has been set.
func (o *Team) HasPermission() bool {
	if o != nil && o.Permission.IsSet() {
		return true
	}

	return false
}

// SetPermission gets a reference to the given NullableString and assigns it to the Permission field.
func (o *Team) SetPermission(v string) {
	o.Permission.Set(&v)
}
// SetPermissionNil sets the value for Permission to be an explicit nil
func (o *Team) SetPermissionNil() {
	o.Permission.Set(nil)
}

// UnsetPermission ensures that no value is present for Permission, not even an explicit nil
func (o *Team) UnsetPermission() {
	o.Permission.Unset()
}

// GetShow returns the Show field value if set, zero value otherwise.
func (o *Team) GetShow() bool {
	if o == nil || IsNil(o.Show) {
		var ret bool
		return ret
	}
	return *o.Show
}

// GetShowOk returns a tuple with the Show field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetShowOk() (*bool, bool) {
	if o == nil || IsNil(o.Show) {
		return nil, false
	}
	return o.Show, true
}

// HasShow returns a boolean if a field has been set.
func (o *Team) HasShow() bool {
	if o != nil && !IsNil(o.Show) {
		return true
	}

	return false
}

// SetShow gets a reference to the given bool and assigns it to the Show field.
func (o *Team) SetShow(v bool) {
	o.Show = &v
}

// GetShowIndex returns the ShowIndex field value if set, zero value otherwise.
func (o *Team) GetShowIndex() int64 {
	if o == nil || IsNil(o.ShowIndex) {
		var ret int64
		return ret
	}
	return *o.ShowIndex
}

// GetShowIndexOk returns a tuple with the ShowIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetShowIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.ShowIndex) {
		return nil, false
	}
	return o.ShowIndex, true
}

// HasShowIndex returns a boolean if a field has been set.
func (o *Team) HasShowIndex() bool {
	if o != nil && !IsNil(o.ShowIndex) {
		return true
	}

	return false
}

// SetShowIndex gets a reference to the given int64 and assigns it to the ShowIndex field.
func (o *Team) SetShowIndex(v int64) {
	o.ShowIndex = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *Team) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *Team) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *Team) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *Team) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *Team) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *Team) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Team) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if o.ChannelCode.IsSet() {
		toSerialize["channelCode"] = o.ChannelCode.Get()
	}
	if o.ChannelAppID.IsSet() {
		toSerialize["channelAppID"] = o.ChannelAppID.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Permission.IsSet() {
		toSerialize["permission"] = o.Permission.Get()
	}
	if !IsNil(o.Show) {
		toSerialize["show"] = o.Show
	}
	if !IsNil(o.ShowIndex) {
		toSerialize["showIndex"] = o.ShowIndex
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


