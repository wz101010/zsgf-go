/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the UserLocationsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLocationsResult{}

// UserLocationsResult struct for UserLocationsResult
type UserLocationsResult struct {
	TotalLocations *int64 `json:"totalLocations,omitempty"`
	Data []GeoLocationResponseModel `json:"data,omitempty"`
}

// NewUserLocationsResult instantiates a new UserLocationsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLocationsResult() *UserLocationsResult {
	this := UserLocationsResult{}
	return &this
}

// NewUserLocationsResultWithDefaults instantiates a new UserLocationsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLocationsResultWithDefaults() *UserLocationsResult {
	this := UserLocationsResult{}
	return &this
}

// GetTotalLocations returns the TotalLocations field value if set, zero value otherwise.
func (o *UserLocationsResult) GetTotalLocations() int64 {
	if o == nil || IsNil(o.TotalLocations) {
		var ret int64
		return ret
	}
	return *o.TotalLocations
}

// GetTotalLocationsOk returns a tuple with the TotalLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLocationsResult) GetTotalLocationsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalLocations) {
		return nil, false
	}
	return o.TotalLocations, true
}

// HasTotalLocations returns a boolean if a field has been set.
func (o *UserLocationsResult) HasTotalLocations() bool {
	if o != nil && !IsNil(o.TotalLocations) {
		return true
	}

	return false
}

// SetTotalLocations gets a reference to the given int64 and assigns it to the TotalLocations field.
func (o *UserLocationsResult) SetTotalLocations(v int64) {
	o.TotalLocations = &v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLocationsResult) GetData() []GeoLocationResponseModel {
	if o == nil {
		var ret []GeoLocationResponseModel
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLocationsResult) GetDataOk() ([]GeoLocationResponseModel, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UserLocationsResult) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []GeoLocationResponseModel and assigns it to the Data field.
func (o *UserLocationsResult) SetData(v []GeoLocationResponseModel) {
	o.Data = v
}

func (o UserLocationsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLocationsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalLocations) {
		toSerialize["totalLocations"] = o.TotalLocations
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableUserLocationsResult struct {
	value *UserLocationsResult
	isSet bool
}

func (v NullableUserLocationsResult) Get() *UserLocationsResult {
	return v.value
}

func (v *NullableUserLocationsResult) Set(val *UserLocationsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLocationsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLocationsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLocationsResult(val *UserLocationsResult) *NullableUserLocationsResult {
	return &NullableUserLocationsResult{value: val, isSet: true}
}

func (v NullableUserLocationsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLocationsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


