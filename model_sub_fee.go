/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the SubFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubFee{}

// SubFee struct for SubFee
type SubFee struct {
	ChargeFee NullableString `json:"chargeFee,omitempty"`
	OriginalChargeFee NullableString `json:"originalChargeFee,omitempty"`
	SwitchFeeRate NullableString `json:"switchFeeRate,omitempty"`
}

// NewSubFee instantiates a new SubFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubFee() *SubFee {
	this := SubFee{}
	return &this
}

// NewSubFeeWithDefaults instantiates a new SubFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubFeeWithDefaults() *SubFee {
	this := SubFee{}
	return &this
}

// GetChargeFee returns the ChargeFee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubFee) GetChargeFee() string {
	if o == nil || IsNil(o.ChargeFee.Get()) {
		var ret string
		return ret
	}
	return *o.ChargeFee.Get()
}

// GetChargeFeeOk returns a tuple with the ChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubFee) GetChargeFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeFee.Get(), o.ChargeFee.IsSet()
}

// HasChargeFee returns a boolean if a field has been set.
func (o *SubFee) HasChargeFee() bool {
	if o != nil && o.ChargeFee.IsSet() {
		return true
	}

	return false
}

// SetChargeFee gets a reference to the given NullableString and assigns it to the ChargeFee field.
func (o *SubFee) SetChargeFee(v string) {
	o.ChargeFee.Set(&v)
}
// SetChargeFeeNil sets the value for ChargeFee to be an explicit nil
func (o *SubFee) SetChargeFeeNil() {
	o.ChargeFee.Set(nil)
}

// UnsetChargeFee ensures that no value is present for ChargeFee, not even an explicit nil
func (o *SubFee) UnsetChargeFee() {
	o.ChargeFee.Unset()
}

// GetOriginalChargeFee returns the OriginalChargeFee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubFee) GetOriginalChargeFee() string {
	if o == nil || IsNil(o.OriginalChargeFee.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalChargeFee.Get()
}

// GetOriginalChargeFeeOk returns a tuple with the OriginalChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubFee) GetOriginalChargeFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalChargeFee.Get(), o.OriginalChargeFee.IsSet()
}

// HasOriginalChargeFee returns a boolean if a field has been set.
func (o *SubFee) HasOriginalChargeFee() bool {
	if o != nil && o.OriginalChargeFee.IsSet() {
		return true
	}

	return false
}

// SetOriginalChargeFee gets a reference to the given NullableString and assigns it to the OriginalChargeFee field.
func (o *SubFee) SetOriginalChargeFee(v string) {
	o.OriginalChargeFee.Set(&v)
}
// SetOriginalChargeFeeNil sets the value for OriginalChargeFee to be an explicit nil
func (o *SubFee) SetOriginalChargeFeeNil() {
	o.OriginalChargeFee.Set(nil)
}

// UnsetOriginalChargeFee ensures that no value is present for OriginalChargeFee, not even an explicit nil
func (o *SubFee) UnsetOriginalChargeFee() {
	o.OriginalChargeFee.Unset()
}

// GetSwitchFeeRate returns the SwitchFeeRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubFee) GetSwitchFeeRate() string {
	if o == nil || IsNil(o.SwitchFeeRate.Get()) {
		var ret string
		return ret
	}
	return *o.SwitchFeeRate.Get()
}

// GetSwitchFeeRateOk returns a tuple with the SwitchFeeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubFee) GetSwitchFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwitchFeeRate.Get(), o.SwitchFeeRate.IsSet()
}

// HasSwitchFeeRate returns a boolean if a field has been set.
func (o *SubFee) HasSwitchFeeRate() bool {
	if o != nil && o.SwitchFeeRate.IsSet() {
		return true
	}

	return false
}

// SetSwitchFeeRate gets a reference to the given NullableString and assigns it to the SwitchFeeRate field.
func (o *SubFee) SetSwitchFeeRate(v string) {
	o.SwitchFeeRate.Set(&v)
}
// SetSwitchFeeRateNil sets the value for SwitchFeeRate to be an explicit nil
func (o *SubFee) SetSwitchFeeRateNil() {
	o.SwitchFeeRate.Set(nil)
}

// UnsetSwitchFeeRate ensures that no value is present for SwitchFeeRate, not even an explicit nil
func (o *SubFee) UnsetSwitchFeeRate() {
	o.SwitchFeeRate.Unset()
}

func (o SubFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChargeFee.IsSet() {
		toSerialize["chargeFee"] = o.ChargeFee.Get()
	}
	if o.OriginalChargeFee.IsSet() {
		toSerialize["originalChargeFee"] = o.OriginalChargeFee.Get()
	}
	if o.SwitchFeeRate.IsSet() {
		toSerialize["switchFeeRate"] = o.SwitchFeeRate.Get()
	}
	return toSerialize, nil
}

type NullableSubFee struct {
	value *SubFee
	isSet bool
}

func (v NullableSubFee) Get() *SubFee {
	return v.value
}

func (v *NullableSubFee) Set(val *SubFee) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFee) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFee(val *SubFee) *NullableSubFee {
	return &NullableSubFee{value: val, isSet: true}
}

func (v NullableSubFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


