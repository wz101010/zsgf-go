/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the FileListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileListResult{}

// FileListResult struct for FileListResult
type FileListResult struct {
	Directories []DirectoryItem `json:"directories,omitempty"`
	Files []FileItem `json:"files,omitempty"`
	TotalDirectories *int32 `json:"totalDirectories,omitempty"`
	TotalFiles *int32 `json:"totalFiles,omitempty"`
	Size *int64 `json:"size,omitempty"`
}

// NewFileListResult instantiates a new FileListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileListResult() *FileListResult {
	this := FileListResult{}
	return &this
}

// NewFileListResultWithDefaults instantiates a new FileListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileListResultWithDefaults() *FileListResult {
	this := FileListResult{}
	return &this
}

// GetDirectories returns the Directories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileListResult) GetDirectories() []DirectoryItem {
	if o == nil {
		var ret []DirectoryItem
		return ret
	}
	return o.Directories
}

// GetDirectoriesOk returns a tuple with the Directories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileListResult) GetDirectoriesOk() ([]DirectoryItem, bool) {
	if o == nil || IsNil(o.Directories) {
		return nil, false
	}
	return o.Directories, true
}

// HasDirectories returns a boolean if a field has been set.
func (o *FileListResult) HasDirectories() bool {
	if o != nil && !IsNil(o.Directories) {
		return true
	}

	return false
}

// SetDirectories gets a reference to the given []DirectoryItem and assigns it to the Directories field.
func (o *FileListResult) SetDirectories(v []DirectoryItem) {
	o.Directories = v
}

// GetFiles returns the Files field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileListResult) GetFiles() []FileItem {
	if o == nil {
		var ret []FileItem
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileListResult) GetFilesOk() ([]FileItem, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *FileListResult) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FileItem and assigns it to the Files field.
func (o *FileListResult) SetFiles(v []FileItem) {
	o.Files = v
}

// GetTotalDirectories returns the TotalDirectories field value if set, zero value otherwise.
func (o *FileListResult) GetTotalDirectories() int32 {
	if o == nil || IsNil(o.TotalDirectories) {
		var ret int32
		return ret
	}
	return *o.TotalDirectories
}

// GetTotalDirectoriesOk returns a tuple with the TotalDirectories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileListResult) GetTotalDirectoriesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalDirectories) {
		return nil, false
	}
	return o.TotalDirectories, true
}

// HasTotalDirectories returns a boolean if a field has been set.
func (o *FileListResult) HasTotalDirectories() bool {
	if o != nil && !IsNil(o.TotalDirectories) {
		return true
	}

	return false
}

// SetTotalDirectories gets a reference to the given int32 and assigns it to the TotalDirectories field.
func (o *FileListResult) SetTotalDirectories(v int32) {
	o.TotalDirectories = &v
}

// GetTotalFiles returns the TotalFiles field value if set, zero value otherwise.
func (o *FileListResult) GetTotalFiles() int32 {
	if o == nil || IsNil(o.TotalFiles) {
		var ret int32
		return ret
	}
	return *o.TotalFiles
}

// GetTotalFilesOk returns a tuple with the TotalFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileListResult) GetTotalFilesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalFiles) {
		return nil, false
	}
	return o.TotalFiles, true
}

// HasTotalFiles returns a boolean if a field has been set.
func (o *FileListResult) HasTotalFiles() bool {
	if o != nil && !IsNil(o.TotalFiles) {
		return true
	}

	return false
}

// SetTotalFiles gets a reference to the given int32 and assigns it to the TotalFiles field.
func (o *FileListResult) SetTotalFiles(v int32) {
	o.TotalFiles = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FileListResult) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileListResult) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FileListResult) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *FileListResult) SetSize(v int64) {
	o.Size = &v
}

func (o FileListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Directories != nil {
		toSerialize["directories"] = o.Directories
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.TotalDirectories) {
		toSerialize["totalDirectories"] = o.TotalDirectories
	}
	if !IsNil(o.TotalFiles) {
		toSerialize["totalFiles"] = o.TotalFiles
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableFileListResult struct {
	value *FileListResult
	isSet bool
}

func (v NullableFileListResult) Get() *FileListResult {
	return v.value
}

func (v *NullableFileListResult) Set(val *FileListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFileListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFileListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileListResult(val *FileListResult) *NullableFileListResult {
	return &NullableFileListResult{value: val, isSet: true}
}

func (v NullableFileListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


