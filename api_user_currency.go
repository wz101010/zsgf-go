/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// UserCurrencyAPIService UserCurrencyAPI service
type UserCurrencyAPIService service

type ApiUserCurrenciesRequest struct {
	ctx context.Context
	ApiService *UserCurrencyAPIService
	id int64
	appKey string
}

func (r ApiUserCurrenciesRequest) Execute() (*UserCurrencyListApiResponse, *http.Response, error) {
	return r.ApiService.UserCurrenciesExecute(r)
}

/*
UserCurrencies 获取用户资产

根据用户ID获取用户的资产列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 用户ID
 @param appKey
 @return ApiUserCurrenciesRequest
*/
func (a *UserCurrencyAPIService) UserCurrencies(ctx context.Context, id int64, appKey string) ApiUserCurrenciesRequest {
	return ApiUserCurrenciesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return UserCurrencyListApiResponse
func (a *UserCurrencyAPIService) UserCurrenciesExecute(r ApiUserCurrenciesRequest) (*UserCurrencyListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserCurrencyListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCurrencyAPIService.UserCurrencies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserCurrency/{appKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCurrencyConsumeRequest struct {
	ctx context.Context
	ApiService *UserCurrencyAPIService
	nonce *string
	timestamp *int64
	signature *string
	appKey string
	currencyConsumeRequest *CurrencyConsumeRequest
}

// 随机数
func (r ApiUserCurrencyConsumeRequest) Nonce(nonce string) ApiUserCurrencyConsumeRequest {
	r.nonce = &nonce
	return r
}

// 时间戳（允许与服务器时间误差在1分钟内）
func (r ApiUserCurrencyConsumeRequest) Timestamp(timestamp int64) ApiUserCurrencyConsumeRequest {
	r.timestamp = &timestamp
	return r
}

// 签名
func (r ApiUserCurrencyConsumeRequest) Signature(signature string) ApiUserCurrencyConsumeRequest {
	r.signature = &signature
	return r
}

// 消费请求参数
func (r ApiUserCurrencyConsumeRequest) CurrencyConsumeRequest(currencyConsumeRequest CurrencyConsumeRequest) ApiUserCurrencyConsumeRequest {
	r.currencyConsumeRequest = &currencyConsumeRequest
	return r
}

func (r ApiUserCurrencyConsumeRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.UserCurrencyConsumeExecute(r)
}

/*
UserCurrencyConsume 消费虚拟币

根据提供的参数进行虚拟币消费

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiUserCurrencyConsumeRequest
*/
func (a *UserCurrencyAPIService) UserCurrencyConsume(ctx context.Context, appKey string) ApiUserCurrencyConsumeRequest {
	return ApiUserCurrencyConsumeRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *UserCurrencyAPIService) UserCurrencyConsumeExecute(r ApiUserCurrencyConsumeRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCurrencyAPIService.UserCurrencyConsume")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserCurrency/{appKey}/CurrencyConsume"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nonce == nil {
		return localVarReturnValue, nil, reportError("nonce is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "nonce", r.nonce, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "signature", r.signature, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.currencyConsumeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCurrencyExchangeRequest struct {
	ctx context.Context
	ApiService *UserCurrencyAPIService
	nonce *string
	timestamp *int64
	signature *string
	appKey string
	exchangeCurrencyRequest *ExchangeCurrencyRequest
}

// 随机数
func (r ApiUserCurrencyExchangeRequest) Nonce(nonce string) ApiUserCurrencyExchangeRequest {
	r.nonce = &nonce
	return r
}

// 时间戳（允许与服务器时间误差在1分钟内）
func (r ApiUserCurrencyExchangeRequest) Timestamp(timestamp int64) ApiUserCurrencyExchangeRequest {
	r.timestamp = &timestamp
	return r
}

// 签名
func (r ApiUserCurrencyExchangeRequest) Signature(signature string) ApiUserCurrencyExchangeRequest {
	r.signature = &signature
	return r
}

// 兑换请求参数
func (r ApiUserCurrencyExchangeRequest) ExchangeCurrencyRequest(exchangeCurrencyRequest ExchangeCurrencyRequest) ApiUserCurrencyExchangeRequest {
	r.exchangeCurrencyRequest = &exchangeCurrencyRequest
	return r
}

func (r ApiUserCurrencyExchangeRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.UserCurrencyExchangeExecute(r)
}

/*
UserCurrencyExchange 兑换虚拟币

根据提供的参数进行虚拟币兑换

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiUserCurrencyExchangeRequest
*/
func (a *UserCurrencyAPIService) UserCurrencyExchange(ctx context.Context, appKey string) ApiUserCurrencyExchangeRequest {
	return ApiUserCurrencyExchangeRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *UserCurrencyAPIService) UserCurrencyExchangeExecute(r ApiUserCurrencyExchangeRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCurrencyAPIService.UserCurrencyExchange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserCurrency/{appKey}/CurrencyExchange"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nonce == nil {
		return localVarReturnValue, nil, reportError("nonce is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "nonce", r.nonce, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "signature", r.signature, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exchangeCurrencyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCurrencyRechargeRequest struct {
	ctx context.Context
	ApiService *UserCurrencyAPIService
	nonce *string
	timestamp *int64
	signature *string
	appKey string
	rechargePointRequest *RechargePointRequest
}

// 随机数
func (r ApiUserCurrencyRechargeRequest) Nonce(nonce string) ApiUserCurrencyRechargeRequest {
	r.nonce = &nonce
	return r
}

// 时间戳（允许与服务器时间误差在1分钟内）
func (r ApiUserCurrencyRechargeRequest) Timestamp(timestamp int64) ApiUserCurrencyRechargeRequest {
	r.timestamp = &timestamp
	return r
}

// 签名
func (r ApiUserCurrencyRechargeRequest) Signature(signature string) ApiUserCurrencyRechargeRequest {
	r.signature = &signature
	return r
}

// 充值请求参数
func (r ApiUserCurrencyRechargeRequest) RechargePointRequest(rechargePointRequest RechargePointRequest) ApiUserCurrencyRechargeRequest {
	r.rechargePointRequest = &rechargePointRequest
	return r
}

func (r ApiUserCurrencyRechargeRequest) Execute() (*BooleanApiResponse, *http.Response, error) {
	return r.ApiService.UserCurrencyRechargeExecute(r)
}

/*
UserCurrencyRecharge 充值虚拟币

根据提供的参数进行虚拟币充值

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiUserCurrencyRechargeRequest
*/
func (a *UserCurrencyAPIService) UserCurrencyRecharge(ctx context.Context, appKey string) ApiUserCurrencyRechargeRequest {
	return ApiUserCurrencyRechargeRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return BooleanApiResponse
func (a *UserCurrencyAPIService) UserCurrencyRechargeExecute(r ApiUserCurrencyRechargeRequest) (*BooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCurrencyAPIService.UserCurrencyRecharge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserCurrency/{appKey}/CurrencyRecharge"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nonce == nil {
		return localVarReturnValue, nil, reportError("nonce is required and must be specified")
	}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "nonce", r.nonce, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "signature", r.signature, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rechargePointRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCurrencyTransactionsRequest struct {
	ctx context.Context
	ApiService *UserCurrencyAPIService
	appKey string
	transType *string
	curCode *string
	startTime *time.Time
	endTime *time.Time
	skip *int32
	take *int32
}

// 交易类型
func (r ApiUserCurrencyTransactionsRequest) TransType(transType string) ApiUserCurrencyTransactionsRequest {
	r.transType = &transType
	return r
}

// 货币代码
func (r ApiUserCurrencyTransactionsRequest) CurCode(curCode string) ApiUserCurrencyTransactionsRequest {
	r.curCode = &curCode
	return r
}

// 开始时间
func (r ApiUserCurrencyTransactionsRequest) StartTime(startTime time.Time) ApiUserCurrencyTransactionsRequest {
	r.startTime = &startTime
	return r
}

// 结束时间
func (r ApiUserCurrencyTransactionsRequest) EndTime(endTime time.Time) ApiUserCurrencyTransactionsRequest {
	r.endTime = &endTime
	return r
}

// 跳过的条数
func (r ApiUserCurrencyTransactionsRequest) Skip(skip int32) ApiUserCurrencyTransactionsRequest {
	r.skip = &skip
	return r
}

// 拉取的条数
func (r ApiUserCurrencyTransactionsRequest) Take(take int32) ApiUserCurrencyTransactionsRequest {
	r.take = &take
	return r
}

func (r ApiUserCurrencyTransactionsRequest) Execute() (*UserCurrencyCurrencyTransResultApiResponse, *http.Response, error) {
	return r.ApiService.UserCurrencyTransactionsExecute(r)
}

/*
UserCurrencyTransactions 虚拟币交易记录

根据提供的参数获取虚拟币交易记录

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appKey
 @return ApiUserCurrencyTransactionsRequest
*/
func (a *UserCurrencyAPIService) UserCurrencyTransactions(ctx context.Context, appKey string) ApiUserCurrencyTransactionsRequest {
	return ApiUserCurrencyTransactionsRequest{
		ApiService: a,
		ctx: ctx,
		appKey: appKey,
	}
}

// Execute executes the request
//  @return UserCurrencyCurrencyTransResultApiResponse
func (a *UserCurrencyAPIService) UserCurrencyTransactionsExecute(r ApiUserCurrencyTransactionsRequest) (*UserCurrencyCurrencyTransResultApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserCurrencyCurrencyTransResultApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserCurrencyAPIService.UserCurrencyTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserCurrency/{appKey}/CurrencyTransactions"
	localVarPath = strings.Replace(localVarPath, "{"+"appKey"+"}", url.PathEscape(parameterValueToString(r.appKey, "appKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.transType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transType", r.transType, "form", "")
	}
	if r.curCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "curCode", r.curCode, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "form", "")
	}
	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
