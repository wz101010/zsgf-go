/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the Currency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Currency{}

// Currency 货币实体，用于表示和管理不同类型的货币信息。
type Currency struct {
	// 货币的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 货币的名称，例如 '人民币', '美元' 等。
	Name NullableString `json:"name,omitempty"`
	// 货币的ISO标准代码，例如 'CNY', 'USD' 等。
	Code NullableString `json:"code,omitempty"`
	// 货币的符号，例如 '$', '€', '¥' 等。
	Symbol NullableString `json:"symbol,omitempty"`
	// 发行该货币的机构或国家名称。
	Issuer NullableString `json:"issuer,omitempty"`
	// 货币的类型，例如 '法定货币', '加密货币' 等。
	CurrencyType NullableString `json:"currencyType,omitempty"`
	// 用于分类或标记货币的标签。
	Tags NullableString `json:"tags,omitempty"`
	// 指示货币当前是否可用。
	Status *bool `json:"status,omitempty"`
	// 指示该货币是否允许进行虚拟充值。
	EnableVirtualRecharge *bool `json:"enableVirtualRecharge,omitempty"`
	// 指示该货币是否允许进行虚拟消费。
	EnableVirtualConsume *bool `json:"enableVirtualConsume,omitempty"`
	// 货币的详细描述信息。
	Description NullableString `json:"description,omitempty"`
	// 该货币与法定货币的兑换比率。
	FiatExchangeRate *int64 `json:"fiatExchangeRate,omitempty"`
	// 每日通过法定货币充值的最大限额。
	FiatDailyRechargeLimit *int64 `json:"fiatDailyRechargeLimit,omitempty"`
	// 货币的总供应量，0 表示无限制。
	TotalSupply *int64 `json:"totalSupply,omitempty"`
	// 货币记录的创建日期，默认为当前时间。
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 货币记录的最后更新日期，默认为当前时间。
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewCurrency instantiates a new Currency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrency() *Currency {
	this := Currency{}
	return &this
}

// NewCurrencyWithDefaults instantiates a new Currency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyWithDefaults() *Currency {
	this := Currency{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Currency) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Currency) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Currency) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Currency) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Currency) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Currency) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Currency) UnsetName() {
	o.Name.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *Currency) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *Currency) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *Currency) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *Currency) UnsetCode() {
	o.Code.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetSymbol() string {
	if o == nil || IsNil(o.Symbol.Get()) {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *Currency) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *Currency) SetSymbol(v string) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *Currency) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *Currency) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetIssuer returns the Issuer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetIssuer() string {
	if o == nil || IsNil(o.Issuer.Get()) {
		var ret string
		return ret
	}
	return *o.Issuer.Get()
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Issuer.Get(), o.Issuer.IsSet()
}

// HasIssuer returns a boolean if a field has been set.
func (o *Currency) HasIssuer() bool {
	if o != nil && o.Issuer.IsSet() {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given NullableString and assigns it to the Issuer field.
func (o *Currency) SetIssuer(v string) {
	o.Issuer.Set(&v)
}
// SetIssuerNil sets the value for Issuer to be an explicit nil
func (o *Currency) SetIssuerNil() {
	o.Issuer.Set(nil)
}

// UnsetIssuer ensures that no value is present for Issuer, not even an explicit nil
func (o *Currency) UnsetIssuer() {
	o.Issuer.Unset()
}

// GetCurrencyType returns the CurrencyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetCurrencyType() string {
	if o == nil || IsNil(o.CurrencyType.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyType.Get()
}

// GetCurrencyTypeOk returns a tuple with the CurrencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetCurrencyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyType.Get(), o.CurrencyType.IsSet()
}

// HasCurrencyType returns a boolean if a field has been set.
func (o *Currency) HasCurrencyType() bool {
	if o != nil && o.CurrencyType.IsSet() {
		return true
	}

	return false
}

// SetCurrencyType gets a reference to the given NullableString and assigns it to the CurrencyType field.
func (o *Currency) SetCurrencyType(v string) {
	o.CurrencyType.Set(&v)
}
// SetCurrencyTypeNil sets the value for CurrencyType to be an explicit nil
func (o *Currency) SetCurrencyTypeNil() {
	o.CurrencyType.Set(nil)
}

// UnsetCurrencyType ensures that no value is present for CurrencyType, not even an explicit nil
func (o *Currency) UnsetCurrencyType() {
	o.CurrencyType.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *Currency) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *Currency) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *Currency) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *Currency) UnsetTags() {
	o.Tags.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Currency) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Currency) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *Currency) SetStatus(v bool) {
	o.Status = &v
}

// GetEnableVirtualRecharge returns the EnableVirtualRecharge field value if set, zero value otherwise.
func (o *Currency) GetEnableVirtualRecharge() bool {
	if o == nil || IsNil(o.EnableVirtualRecharge) {
		var ret bool
		return ret
	}
	return *o.EnableVirtualRecharge
}

// GetEnableVirtualRechargeOk returns a tuple with the EnableVirtualRecharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetEnableVirtualRechargeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVirtualRecharge) {
		return nil, false
	}
	return o.EnableVirtualRecharge, true
}

// HasEnableVirtualRecharge returns a boolean if a field has been set.
func (o *Currency) HasEnableVirtualRecharge() bool {
	if o != nil && !IsNil(o.EnableVirtualRecharge) {
		return true
	}

	return false
}

// SetEnableVirtualRecharge gets a reference to the given bool and assigns it to the EnableVirtualRecharge field.
func (o *Currency) SetEnableVirtualRecharge(v bool) {
	o.EnableVirtualRecharge = &v
}

// GetEnableVirtualConsume returns the EnableVirtualConsume field value if set, zero value otherwise.
func (o *Currency) GetEnableVirtualConsume() bool {
	if o == nil || IsNil(o.EnableVirtualConsume) {
		var ret bool
		return ret
	}
	return *o.EnableVirtualConsume
}

// GetEnableVirtualConsumeOk returns a tuple with the EnableVirtualConsume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetEnableVirtualConsumeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVirtualConsume) {
		return nil, false
	}
	return o.EnableVirtualConsume, true
}

// HasEnableVirtualConsume returns a boolean if a field has been set.
func (o *Currency) HasEnableVirtualConsume() bool {
	if o != nil && !IsNil(o.EnableVirtualConsume) {
		return true
	}

	return false
}

// SetEnableVirtualConsume gets a reference to the given bool and assigns it to the EnableVirtualConsume field.
func (o *Currency) SetEnableVirtualConsume(v bool) {
	o.EnableVirtualConsume = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Currency) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Currency) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Currency) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Currency) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Currency) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Currency) UnsetDescription() {
	o.Description.Unset()
}

// GetFiatExchangeRate returns the FiatExchangeRate field value if set, zero value otherwise.
func (o *Currency) GetFiatExchangeRate() int64 {
	if o == nil || IsNil(o.FiatExchangeRate) {
		var ret int64
		return ret
	}
	return *o.FiatExchangeRate
}

// GetFiatExchangeRateOk returns a tuple with the FiatExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetFiatExchangeRateOk() (*int64, bool) {
	if o == nil || IsNil(o.FiatExchangeRate) {
		return nil, false
	}
	return o.FiatExchangeRate, true
}

// HasFiatExchangeRate returns a boolean if a field has been set.
func (o *Currency) HasFiatExchangeRate() bool {
	if o != nil && !IsNil(o.FiatExchangeRate) {
		return true
	}

	return false
}

// SetFiatExchangeRate gets a reference to the given int64 and assigns it to the FiatExchangeRate field.
func (o *Currency) SetFiatExchangeRate(v int64) {
	o.FiatExchangeRate = &v
}

// GetFiatDailyRechargeLimit returns the FiatDailyRechargeLimit field value if set, zero value otherwise.
func (o *Currency) GetFiatDailyRechargeLimit() int64 {
	if o == nil || IsNil(o.FiatDailyRechargeLimit) {
		var ret int64
		return ret
	}
	return *o.FiatDailyRechargeLimit
}

// GetFiatDailyRechargeLimitOk returns a tuple with the FiatDailyRechargeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetFiatDailyRechargeLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.FiatDailyRechargeLimit) {
		return nil, false
	}
	return o.FiatDailyRechargeLimit, true
}

// HasFiatDailyRechargeLimit returns a boolean if a field has been set.
func (o *Currency) HasFiatDailyRechargeLimit() bool {
	if o != nil && !IsNil(o.FiatDailyRechargeLimit) {
		return true
	}

	return false
}

// SetFiatDailyRechargeLimit gets a reference to the given int64 and assigns it to the FiatDailyRechargeLimit field.
func (o *Currency) SetFiatDailyRechargeLimit(v int64) {
	o.FiatDailyRechargeLimit = &v
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise.
func (o *Currency) GetTotalSupply() int64 {
	if o == nil || IsNil(o.TotalSupply) {
		var ret int64
		return ret
	}
	return *o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetTotalSupplyOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSupply) {
		return nil, false
	}
	return o.TotalSupply, true
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *Currency) HasTotalSupply() bool {
	if o != nil && !IsNil(o.TotalSupply) {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given int64 and assigns it to the TotalSupply field.
func (o *Currency) SetTotalSupply(v int64) {
	o.TotalSupply = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *Currency) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *Currency) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *Currency) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *Currency) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *Currency) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *Currency) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o Currency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Currency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if o.Issuer.IsSet() {
		toSerialize["issuer"] = o.Issuer.Get()
	}
	if o.CurrencyType.IsSet() {
		toSerialize["currencyType"] = o.CurrencyType.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.EnableVirtualRecharge) {
		toSerialize["enableVirtualRecharge"] = o.EnableVirtualRecharge
	}
	if !IsNil(o.EnableVirtualConsume) {
		toSerialize["enableVirtualConsume"] = o.EnableVirtualConsume
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.FiatExchangeRate) {
		toSerialize["fiatExchangeRate"] = o.FiatExchangeRate
	}
	if !IsNil(o.FiatDailyRechargeLimit) {
		toSerialize["fiatDailyRechargeLimit"] = o.FiatDailyRechargeLimit
	}
	if !IsNil(o.TotalSupply) {
		toSerialize["totalSupply"] = o.TotalSupply
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableCurrency struct {
	value *Currency
	isSet bool
}

func (v NullableCurrency) Get() *Currency {
	return v.value
}

func (v *NullableCurrency) Set(val *Currency) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrency(val *Currency) *NullableCurrency {
	return &NullableCurrency{value: val, isSet: true}
}

func (v NullableCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


