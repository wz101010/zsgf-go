/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings 公共配置存储实体，用于集中管理系统的配置项。
type Settings struct {
	// 配置项的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 配置项所属的业务代码，用于分类管理。
	BizCode NullableString `json:"bizCode,omitempty"`
	// 配置项所属的业务标识，用于唯一标识业务。
	BizIdentity NullableString `json:"bizIdentity,omitempty"`
	// 配置项的提供者代码，用于标识配置来源。
	ProviderCode NullableString `json:"providerCode,omitempty"`
	// 配置项的分组代码，用于组织和管理相关配置。
	GroupCode NullableString `json:"groupCode,omitempty"`
	// 配置项的唯一代码，用于标识具体的配置项。
	Code NullableString `json:"code,omitempty"`
	// 配置项的具体值，存储配置内容。
	Value NullableString `json:"value,omitempty"`
	// 用于分类或标记配置项的标签。
	Tags NullableString `json:"tags,omitempty"`
	// 配置项的详细描述，说明其用途和作用。
	Description NullableString `json:"description,omitempty"`
	// 指示该配置项是否可供前端使用。
	FrontendUsable *bool `json:"frontendUsable,omitempty"`
	// 配置项的创建日期，默认为当前时间。
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 配置项的最后更新日期，默认为当前时间。
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings() *Settings {
	this := Settings{}
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Settings) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Settings) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Settings) SetId(v int64) {
	o.Id = &v
}

// GetBizCode returns the BizCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetBizCode() string {
	if o == nil || IsNil(o.BizCode.Get()) {
		var ret string
		return ret
	}
	return *o.BizCode.Get()
}

// GetBizCodeOk returns a tuple with the BizCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetBizCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BizCode.Get(), o.BizCode.IsSet()
}

// HasBizCode returns a boolean if a field has been set.
func (o *Settings) HasBizCode() bool {
	if o != nil && o.BizCode.IsSet() {
		return true
	}

	return false
}

// SetBizCode gets a reference to the given NullableString and assigns it to the BizCode field.
func (o *Settings) SetBizCode(v string) {
	o.BizCode.Set(&v)
}
// SetBizCodeNil sets the value for BizCode to be an explicit nil
func (o *Settings) SetBizCodeNil() {
	o.BizCode.Set(nil)
}

// UnsetBizCode ensures that no value is present for BizCode, not even an explicit nil
func (o *Settings) UnsetBizCode() {
	o.BizCode.Unset()
}

// GetBizIdentity returns the BizIdentity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetBizIdentity() string {
	if o == nil || IsNil(o.BizIdentity.Get()) {
		var ret string
		return ret
	}
	return *o.BizIdentity.Get()
}

// GetBizIdentityOk returns a tuple with the BizIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetBizIdentityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BizIdentity.Get(), o.BizIdentity.IsSet()
}

// HasBizIdentity returns a boolean if a field has been set.
func (o *Settings) HasBizIdentity() bool {
	if o != nil && o.BizIdentity.IsSet() {
		return true
	}

	return false
}

// SetBizIdentity gets a reference to the given NullableString and assigns it to the BizIdentity field.
func (o *Settings) SetBizIdentity(v string) {
	o.BizIdentity.Set(&v)
}
// SetBizIdentityNil sets the value for BizIdentity to be an explicit nil
func (o *Settings) SetBizIdentityNil() {
	o.BizIdentity.Set(nil)
}

// UnsetBizIdentity ensures that no value is present for BizIdentity, not even an explicit nil
func (o *Settings) UnsetBizIdentity() {
	o.BizIdentity.Unset()
}

// GetProviderCode returns the ProviderCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetProviderCode() string {
	if o == nil || IsNil(o.ProviderCode.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderCode.Get()
}

// GetProviderCodeOk returns a tuple with the ProviderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetProviderCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderCode.Get(), o.ProviderCode.IsSet()
}

// HasProviderCode returns a boolean if a field has been set.
func (o *Settings) HasProviderCode() bool {
	if o != nil && o.ProviderCode.IsSet() {
		return true
	}

	return false
}

// SetProviderCode gets a reference to the given NullableString and assigns it to the ProviderCode field.
func (o *Settings) SetProviderCode(v string) {
	o.ProviderCode.Set(&v)
}
// SetProviderCodeNil sets the value for ProviderCode to be an explicit nil
func (o *Settings) SetProviderCodeNil() {
	o.ProviderCode.Set(nil)
}

// UnsetProviderCode ensures that no value is present for ProviderCode, not even an explicit nil
func (o *Settings) UnsetProviderCode() {
	o.ProviderCode.Unset()
}

// GetGroupCode returns the GroupCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetGroupCode() string {
	if o == nil || IsNil(o.GroupCode.Get()) {
		var ret string
		return ret
	}
	return *o.GroupCode.Get()
}

// GetGroupCodeOk returns a tuple with the GroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetGroupCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupCode.Get(), o.GroupCode.IsSet()
}

// HasGroupCode returns a boolean if a field has been set.
func (o *Settings) HasGroupCode() bool {
	if o != nil && o.GroupCode.IsSet() {
		return true
	}

	return false
}

// SetGroupCode gets a reference to the given NullableString and assigns it to the GroupCode field.
func (o *Settings) SetGroupCode(v string) {
	o.GroupCode.Set(&v)
}
// SetGroupCodeNil sets the value for GroupCode to be an explicit nil
func (o *Settings) SetGroupCodeNil() {
	o.GroupCode.Set(nil)
}

// UnsetGroupCode ensures that no value is present for GroupCode, not even an explicit nil
func (o *Settings) UnsetGroupCode() {
	o.GroupCode.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *Settings) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *Settings) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *Settings) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *Settings) UnsetCode() {
	o.Code.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *Settings) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *Settings) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *Settings) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *Settings) UnsetValue() {
	o.Value.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *Settings) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *Settings) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *Settings) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *Settings) UnsetTags() {
	o.Tags.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settings) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settings) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Settings) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Settings) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Settings) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Settings) UnsetDescription() {
	o.Description.Unset()
}

// GetFrontendUsable returns the FrontendUsable field value if set, zero value otherwise.
func (o *Settings) GetFrontendUsable() bool {
	if o == nil || IsNil(o.FrontendUsable) {
		var ret bool
		return ret
	}
	return *o.FrontendUsable
}

// GetFrontendUsableOk returns a tuple with the FrontendUsable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetFrontendUsableOk() (*bool, bool) {
	if o == nil || IsNil(o.FrontendUsable) {
		return nil, false
	}
	return o.FrontendUsable, true
}

// HasFrontendUsable returns a boolean if a field has been set.
func (o *Settings) HasFrontendUsable() bool {
	if o != nil && !IsNil(o.FrontendUsable) {
		return true
	}

	return false
}

// SetFrontendUsable gets a reference to the given bool and assigns it to the FrontendUsable field.
func (o *Settings) SetFrontendUsable(v bool) {
	o.FrontendUsable = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *Settings) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *Settings) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *Settings) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *Settings) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *Settings) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *Settings) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.BizCode.IsSet() {
		toSerialize["bizCode"] = o.BizCode.Get()
	}
	if o.BizIdentity.IsSet() {
		toSerialize["bizIdentity"] = o.BizIdentity.Get()
	}
	if o.ProviderCode.IsSet() {
		toSerialize["providerCode"] = o.ProviderCode.Get()
	}
	if o.GroupCode.IsSet() {
		toSerialize["groupCode"] = o.GroupCode.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.FrontendUsable) {
		toSerialize["frontendUsable"] = o.FrontendUsable
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


