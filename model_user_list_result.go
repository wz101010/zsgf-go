/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the UserListResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserListResult{}

// UserListResult struct for UserListResult
type UserListResult struct {
	Total *int64 `json:"total,omitempty"`
	Data []AppUserListResponse `json:"data,omitempty"`
}

// NewUserListResult instantiates a new UserListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserListResult() *UserListResult {
	this := UserListResult{}
	return &this
}

// NewUserListResultWithDefaults instantiates a new UserListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserListResultWithDefaults() *UserListResult {
	this := UserListResult{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *UserListResult) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserListResult) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *UserListResult) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *UserListResult) SetTotal(v int64) {
	o.Total = &v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserListResult) GetData() []AppUserListResponse {
	if o == nil {
		var ret []AppUserListResponse
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserListResult) GetDataOk() ([]AppUserListResponse, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UserListResult) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []AppUserListResponse and assigns it to the Data field.
func (o *UserListResult) SetData(v []AppUserListResponse) {
	o.Data = v
}

func (o UserListResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserListResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableUserListResult struct {
	value *UserListResult
	isSet bool
}

func (v NullableUserListResult) Get() *UserListResult {
	return v.value
}

func (v *NullableUserListResult) Set(val *UserListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserListResult(val *UserListResult) *NullableUserListResult {
	return &NullableUserListResult{value: val, isSet: true}
}

func (v NullableUserListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


