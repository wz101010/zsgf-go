/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the AppInfoItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppInfoItem{}

// AppInfoItem struct for AppInfoItem
type AppInfoItem struct {
	AppKey NullableString `json:"appKey,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Logo NullableString `json:"logo,omitempty"`
	Tags NullableString `json:"tags,omitempty"`
	Website NullableString `json:"website,omitempty"`
	Description NullableString `json:"description,omitempty"`
	ProjectID *int64 `json:"projectID,omitempty"`
}

// NewAppInfoItem instantiates a new AppInfoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfoItem() *AppInfoItem {
	this := AppInfoItem{}
	return &this
}

// NewAppInfoItemWithDefaults instantiates a new AppInfoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoItemWithDefaults() *AppInfoItem {
	this := AppInfoItem{}
	return &this
}

// GetAppKey returns the AppKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoItem) GetAppKey() string {
	if o == nil || IsNil(o.AppKey.Get()) {
		var ret string
		return ret
	}
	return *o.AppKey.Get()
}

// GetAppKeyOk returns a tuple with the AppKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoItem) GetAppKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppKey.Get(), o.AppKey.IsSet()
}

// HasAppKey returns a boolean if a field has been set.
func (o *AppInfoItem) HasAppKey() bool {
	if o != nil && o.AppKey.IsSet() {
		return true
	}

	return false
}

// SetAppKey gets a reference to the given NullableString and assigns it to the AppKey field.
func (o *AppInfoItem) SetAppKey(v string) {
	o.AppKey.Set(&v)
}
// SetAppKeyNil sets the value for AppKey to be an explicit nil
func (o *AppInfoItem) SetAppKeyNil() {
	o.AppKey.Set(nil)
}

// UnsetAppKey ensures that no value is present for AppKey, not even an explicit nil
func (o *AppInfoItem) UnsetAppKey() {
	o.AppKey.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppInfoItem) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoItem) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppInfoItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AppInfoItem) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoItem) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AppInfoItem) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AppInfoItem) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AppInfoItem) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AppInfoItem) UnsetName() {
	o.Name.Unset()
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoItem) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoItem) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *AppInfoItem) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *AppInfoItem) SetLogo(v string) {
	o.Logo.Set(&v)
}
// SetLogoNil sets the value for Logo to be an explicit nil
func (o *AppInfoItem) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *AppInfoItem) UnsetLogo() {
	o.Logo.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoItem) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoItem) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *AppInfoItem) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *AppInfoItem) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *AppInfoItem) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *AppInfoItem) UnsetTags() {
	o.Tags.Unset()
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoItem) GetWebsite() string {
	if o == nil || IsNil(o.Website.Get()) {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoItem) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *AppInfoItem) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *AppInfoItem) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *AppInfoItem) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *AppInfoItem) UnsetWebsite() {
	o.Website.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoItem) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AppInfoItem) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AppInfoItem) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AppInfoItem) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AppInfoItem) UnsetDescription() {
	o.Description.Unset()
}

// GetProjectID returns the ProjectID field value if set, zero value otherwise.
func (o *AppInfoItem) GetProjectID() int64 {
	if o == nil || IsNil(o.ProjectID) {
		var ret int64
		return ret
	}
	return *o.ProjectID
}

// GetProjectIDOk returns a tuple with the ProjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoItem) GetProjectIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ProjectID) {
		return nil, false
	}
	return o.ProjectID, true
}

// HasProjectID returns a boolean if a field has been set.
func (o *AppInfoItem) HasProjectID() bool {
	if o != nil && !IsNil(o.ProjectID) {
		return true
	}

	return false
}

// SetProjectID gets a reference to the given int64 and assigns it to the ProjectID field.
func (o *AppInfoItem) SetProjectID(v int64) {
	o.ProjectID = &v
}

func (o AppInfoItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppInfoItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppKey.IsSet() {
		toSerialize["appKey"] = o.AppKey.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.ProjectID) {
		toSerialize["projectID"] = o.ProjectID
	}
	return toSerialize, nil
}

type NullableAppInfoItem struct {
	value *AppInfoItem
	isSet bool
}

func (v NullableAppInfoItem) Get() *AppInfoItem {
	return v.value
}

func (v *NullableAppInfoItem) Set(val *AppInfoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfoItem(val *AppInfoItem) *NullableAppInfoItem {
	return &NullableAppInfoItem{value: val, isSet: true}
}

func (v NullableAppInfoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


