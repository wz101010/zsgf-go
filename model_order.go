/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order 订单实体，用于记录用户的订单信息。
type Order struct {
	// 订单的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 创建订单的用户ID。
	UserID *int64 `json:"userID,omitempty"`
	// 订单的支付类型，例如 '信用卡', '支付宝', '微信支付' 等。
	PayType NullableString `json:"payType,omitempty"`
	// 订单的总金额。
	Amount *float64 `json:"amount,omitempty"`
	// 订单的唯一编号，通常由系统生成。
	OrderNo NullableString `json:"orderNo,omitempty"`
	// 与订单关联的交易编号，通常由支付平台提供。
	TradeNo NullableString `json:"tradeNo,omitempty"`
	// 订单的当前状态，例如 '待支付', '已完成', '已取消' 等。
	Status NullableString `json:"status,omitempty"`
	// 订单中商品的类型分类。
	ProductType NullableString `json:"productType,omitempty"`
	// 订单中商品的唯一标识符。
	ProductID NullableString `json:"productID,omitempty"`
	// 订单中商品的名称。
	ProductName NullableString `json:"productName,omitempty"`
	// 指示订单是否允许进行退款操作。
	AllowRefund *bool `json:"allowRefund,omitempty"`
	// 订单允许进行退款操作的截止时间。
	AllowRefundUntil *time.Time `json:"allowRefundUntil,omitempty"`
	// 用于分类或标记订单的标签。
	Tags NullableString `json:"tags,omitempty"`
	// 订单的额外备注信息。
	Remark NullableString `json:"remark,omitempty"`
	// 订单的详细描述信息。
	Description NullableString `json:"description,omitempty"`
	// 订单完成支付的时间。
	OrderPayTime *time.Time `json:"orderPayTime,omitempty"`
	// 订单的过期时间，超过该时间订单将自动取消。
	ExpireTime *time.Time `json:"expireTime,omitempty"`
	// 订单的创建时间，默认为当前时间。
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 订单的最后更新时间，默认为当前时间。
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Order) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Order) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Order) SetId(v int64) {
	o.Id = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *Order) GetUserID() int64 {
	if o == nil || IsNil(o.UserID) {
		var ret int64
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *Order) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given int64 and assigns it to the UserID field.
func (o *Order) SetUserID(v int64) {
	o.UserID = &v
}

// GetPayType returns the PayType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetPayType() string {
	if o == nil || IsNil(o.PayType.Get()) {
		var ret string
		return ret
	}
	return *o.PayType.Get()
}

// GetPayTypeOk returns a tuple with the PayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetPayTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PayType.Get(), o.PayType.IsSet()
}

// HasPayType returns a boolean if a field has been set.
func (o *Order) HasPayType() bool {
	if o != nil && o.PayType.IsSet() {
		return true
	}

	return false
}

// SetPayType gets a reference to the given NullableString and assigns it to the PayType field.
func (o *Order) SetPayType(v string) {
	o.PayType.Set(&v)
}
// SetPayTypeNil sets the value for PayType to be an explicit nil
func (o *Order) SetPayTypeNil() {
	o.PayType.Set(nil)
}

// UnsetPayType ensures that no value is present for PayType, not even an explicit nil
func (o *Order) UnsetPayType() {
	o.PayType.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Order) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Order) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *Order) SetAmount(v float64) {
	o.Amount = &v
}

// GetOrderNo returns the OrderNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetOrderNo() string {
	if o == nil || IsNil(o.OrderNo.Get()) {
		var ret string
		return ret
	}
	return *o.OrderNo.Get()
}

// GetOrderNoOk returns a tuple with the OrderNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetOrderNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderNo.Get(), o.OrderNo.IsSet()
}

// HasOrderNo returns a boolean if a field has been set.
func (o *Order) HasOrderNo() bool {
	if o != nil && o.OrderNo.IsSet() {
		return true
	}

	return false
}

// SetOrderNo gets a reference to the given NullableString and assigns it to the OrderNo field.
func (o *Order) SetOrderNo(v string) {
	o.OrderNo.Set(&v)
}
// SetOrderNoNil sets the value for OrderNo to be an explicit nil
func (o *Order) SetOrderNoNil() {
	o.OrderNo.Set(nil)
}

// UnsetOrderNo ensures that no value is present for OrderNo, not even an explicit nil
func (o *Order) UnsetOrderNo() {
	o.OrderNo.Unset()
}

// GetTradeNo returns the TradeNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetTradeNo() string {
	if o == nil || IsNil(o.TradeNo.Get()) {
		var ret string
		return ret
	}
	return *o.TradeNo.Get()
}

// GetTradeNoOk returns a tuple with the TradeNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetTradeNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TradeNo.Get(), o.TradeNo.IsSet()
}

// HasTradeNo returns a boolean if a field has been set.
func (o *Order) HasTradeNo() bool {
	if o != nil && o.TradeNo.IsSet() {
		return true
	}

	return false
}

// SetTradeNo gets a reference to the given NullableString and assigns it to the TradeNo field.
func (o *Order) SetTradeNo(v string) {
	o.TradeNo.Set(&v)
}
// SetTradeNoNil sets the value for TradeNo to be an explicit nil
func (o *Order) SetTradeNoNil() {
	o.TradeNo.Set(nil)
}

// UnsetTradeNo ensures that no value is present for TradeNo, not even an explicit nil
func (o *Order) UnsetTradeNo() {
	o.TradeNo.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *Order) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *Order) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *Order) UnsetStatus() {
	o.Status.Unset()
}

// GetProductType returns the ProductType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetProductType() string {
	if o == nil || IsNil(o.ProductType.Get()) {
		var ret string
		return ret
	}
	return *o.ProductType.Get()
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductType.Get(), o.ProductType.IsSet()
}

// HasProductType returns a boolean if a field has been set.
func (o *Order) HasProductType() bool {
	if o != nil && o.ProductType.IsSet() {
		return true
	}

	return false
}

// SetProductType gets a reference to the given NullableString and assigns it to the ProductType field.
func (o *Order) SetProductType(v string) {
	o.ProductType.Set(&v)
}
// SetProductTypeNil sets the value for ProductType to be an explicit nil
func (o *Order) SetProductTypeNil() {
	o.ProductType.Set(nil)
}

// UnsetProductType ensures that no value is present for ProductType, not even an explicit nil
func (o *Order) UnsetProductType() {
	o.ProductType.Unset()
}

// GetProductID returns the ProductID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetProductID() string {
	if o == nil || IsNil(o.ProductID.Get()) {
		var ret string
		return ret
	}
	return *o.ProductID.Get()
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetProductIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductID.Get(), o.ProductID.IsSet()
}

// HasProductID returns a boolean if a field has been set.
func (o *Order) HasProductID() bool {
	if o != nil && o.ProductID.IsSet() {
		return true
	}

	return false
}

// SetProductID gets a reference to the given NullableString and assigns it to the ProductID field.
func (o *Order) SetProductID(v string) {
	o.ProductID.Set(&v)
}
// SetProductIDNil sets the value for ProductID to be an explicit nil
func (o *Order) SetProductIDNil() {
	o.ProductID.Set(nil)
}

// UnsetProductID ensures that no value is present for ProductID, not even an explicit nil
func (o *Order) UnsetProductID() {
	o.ProductID.Unset()
}

// GetProductName returns the ProductName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetProductName() string {
	if o == nil || IsNil(o.ProductName.Get()) {
		var ret string
		return ret
	}
	return *o.ProductName.Get()
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductName.Get(), o.ProductName.IsSet()
}

// HasProductName returns a boolean if a field has been set.
func (o *Order) HasProductName() bool {
	if o != nil && o.ProductName.IsSet() {
		return true
	}

	return false
}

// SetProductName gets a reference to the given NullableString and assigns it to the ProductName field.
func (o *Order) SetProductName(v string) {
	o.ProductName.Set(&v)
}
// SetProductNameNil sets the value for ProductName to be an explicit nil
func (o *Order) SetProductNameNil() {
	o.ProductName.Set(nil)
}

// UnsetProductName ensures that no value is present for ProductName, not even an explicit nil
func (o *Order) UnsetProductName() {
	o.ProductName.Unset()
}

// GetAllowRefund returns the AllowRefund field value if set, zero value otherwise.
func (o *Order) GetAllowRefund() bool {
	if o == nil || IsNil(o.AllowRefund) {
		var ret bool
		return ret
	}
	return *o.AllowRefund
}

// GetAllowRefundOk returns a tuple with the AllowRefund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAllowRefundOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRefund) {
		return nil, false
	}
	return o.AllowRefund, true
}

// HasAllowRefund returns a boolean if a field has been set.
func (o *Order) HasAllowRefund() bool {
	if o != nil && !IsNil(o.AllowRefund) {
		return true
	}

	return false
}

// SetAllowRefund gets a reference to the given bool and assigns it to the AllowRefund field.
func (o *Order) SetAllowRefund(v bool) {
	o.AllowRefund = &v
}

// GetAllowRefundUntil returns the AllowRefundUntil field value if set, zero value otherwise.
func (o *Order) GetAllowRefundUntil() time.Time {
	if o == nil || IsNil(o.AllowRefundUntil) {
		var ret time.Time
		return ret
	}
	return *o.AllowRefundUntil
}

// GetAllowRefundUntilOk returns a tuple with the AllowRefundUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAllowRefundUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowRefundUntil) {
		return nil, false
	}
	return o.AllowRefundUntil, true
}

// HasAllowRefundUntil returns a boolean if a field has been set.
func (o *Order) HasAllowRefundUntil() bool {
	if o != nil && !IsNil(o.AllowRefundUntil) {
		return true
	}

	return false
}

// SetAllowRefundUntil gets a reference to the given time.Time and assigns it to the AllowRefundUntil field.
func (o *Order) SetAllowRefundUntil(v time.Time) {
	o.AllowRefundUntil = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *Order) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *Order) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *Order) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *Order) UnsetTags() {
	o.Tags.Unset()
}

// GetRemark returns the Remark field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetRemark() string {
	if o == nil || IsNil(o.Remark.Get()) {
		var ret string
		return ret
	}
	return *o.Remark.Get()
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetRemarkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remark.Get(), o.Remark.IsSet()
}

// HasRemark returns a boolean if a field has been set.
func (o *Order) HasRemark() bool {
	if o != nil && o.Remark.IsSet() {
		return true
	}

	return false
}

// SetRemark gets a reference to the given NullableString and assigns it to the Remark field.
func (o *Order) SetRemark(v string) {
	o.Remark.Set(&v)
}
// SetRemarkNil sets the value for Remark to be an explicit nil
func (o *Order) SetRemarkNil() {
	o.Remark.Set(nil)
}

// UnsetRemark ensures that no value is present for Remark, not even an explicit nil
func (o *Order) UnsetRemark() {
	o.Remark.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Order) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Order) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Order) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Order) UnsetDescription() {
	o.Description.Unset()
}

// GetOrderPayTime returns the OrderPayTime field value if set, zero value otherwise.
func (o *Order) GetOrderPayTime() time.Time {
	if o == nil || IsNil(o.OrderPayTime) {
		var ret time.Time
		return ret
	}
	return *o.OrderPayTime
}

// GetOrderPayTimeOk returns a tuple with the OrderPayTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderPayTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OrderPayTime) {
		return nil, false
	}
	return o.OrderPayTime, true
}

// HasOrderPayTime returns a boolean if a field has been set.
func (o *Order) HasOrderPayTime() bool {
	if o != nil && !IsNil(o.OrderPayTime) {
		return true
	}

	return false
}

// SetOrderPayTime gets a reference to the given time.Time and assigns it to the OrderPayTime field.
func (o *Order) SetOrderPayTime(v time.Time) {
	o.OrderPayTime = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *Order) GetExpireTime() time.Time {
	if o == nil || IsNil(o.ExpireTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExpireTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireTime) {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *Order) HasExpireTime() bool {
	if o != nil && !IsNil(o.ExpireTime) {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given time.Time and assigns it to the ExpireTime field.
func (o *Order) SetExpireTime(v time.Time) {
	o.ExpireTime = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *Order) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *Order) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *Order) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *Order) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *Order) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *Order) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if o.PayType.IsSet() {
		toSerialize["payType"] = o.PayType.Get()
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if o.OrderNo.IsSet() {
		toSerialize["orderNo"] = o.OrderNo.Get()
	}
	if o.TradeNo.IsSet() {
		toSerialize["tradeNo"] = o.TradeNo.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.ProductType.IsSet() {
		toSerialize["productType"] = o.ProductType.Get()
	}
	if o.ProductID.IsSet() {
		toSerialize["productID"] = o.ProductID.Get()
	}
	if o.ProductName.IsSet() {
		toSerialize["productName"] = o.ProductName.Get()
	}
	if !IsNil(o.AllowRefund) {
		toSerialize["allowRefund"] = o.AllowRefund
	}
	if !IsNil(o.AllowRefundUntil) {
		toSerialize["allowRefundUntil"] = o.AllowRefundUntil
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if o.Remark.IsSet() {
		toSerialize["remark"] = o.Remark.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.OrderPayTime) {
		toSerialize["orderPayTime"] = o.OrderPayTime
	}
	if !IsNil(o.ExpireTime) {
		toSerialize["expireTime"] = o.ExpireTime
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


