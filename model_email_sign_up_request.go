/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailSignUpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSignUpRequest{}

// EmailSignUpRequest struct for EmailSignUpRequest
type EmailSignUpRequest struct {
	Email string `json:"email"`
	Pwd string `json:"pwd"`
	// 邮箱验证码
	EmailCode NullableString `json:"emailCode,omitempty" validate:"regexp=\\\\d{4,8}$"`
	// 手机号
	Phone NullableString `json:"phone,omitempty" validate:"regexp=^(\\\\d{11})?$"`
	// 手机验证码（只有启用的手机验证码功能时，才需要传入）
	PhoneCode NullableString `json:"phoneCode,omitempty" validate:"regexp=\\\\d{4,8}$"`
	// 昵称
	NickName NullableString `json:"nickName,omitempty"`
	// 头像
	Avatar NullableString `json:"avatar,omitempty"`
	// 自定义数据
	Data NullableString `json:"data,omitempty"`
}

type _EmailSignUpRequest EmailSignUpRequest

// NewEmailSignUpRequest instantiates a new EmailSignUpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSignUpRequest(email string, pwd string) *EmailSignUpRequest {
	this := EmailSignUpRequest{}
	this.Email = email
	this.Pwd = pwd
	return &this
}

// NewEmailSignUpRequestWithDefaults instantiates a new EmailSignUpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSignUpRequestWithDefaults() *EmailSignUpRequest {
	this := EmailSignUpRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *EmailSignUpRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *EmailSignUpRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *EmailSignUpRequest) SetEmail(v string) {
	o.Email = v
}

// GetPwd returns the Pwd field value
func (o *EmailSignUpRequest) GetPwd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pwd
}

// GetPwdOk returns a tuple with the Pwd field value
// and a boolean to check if the value has been set.
func (o *EmailSignUpRequest) GetPwdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pwd, true
}

// SetPwd sets field value
func (o *EmailSignUpRequest) SetPwd(v string) {
	o.Pwd = v
}

// GetEmailCode returns the EmailCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSignUpRequest) GetEmailCode() string {
	if o == nil || IsNil(o.EmailCode.Get()) {
		var ret string
		return ret
	}
	return *o.EmailCode.Get()
}

// GetEmailCodeOk returns a tuple with the EmailCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSignUpRequest) GetEmailCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailCode.Get(), o.EmailCode.IsSet()
}

// HasEmailCode returns a boolean if a field has been set.
func (o *EmailSignUpRequest) HasEmailCode() bool {
	if o != nil && o.EmailCode.IsSet() {
		return true
	}

	return false
}

// SetEmailCode gets a reference to the given NullableString and assigns it to the EmailCode field.
func (o *EmailSignUpRequest) SetEmailCode(v string) {
	o.EmailCode.Set(&v)
}
// SetEmailCodeNil sets the value for EmailCode to be an explicit nil
func (o *EmailSignUpRequest) SetEmailCodeNil() {
	o.EmailCode.Set(nil)
}

// UnsetEmailCode ensures that no value is present for EmailCode, not even an explicit nil
func (o *EmailSignUpRequest) UnsetEmailCode() {
	o.EmailCode.Unset()
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSignUpRequest) GetPhone() string {
	if o == nil || IsNil(o.Phone.Get()) {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSignUpRequest) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field has been set.
func (o *EmailSignUpRequest) HasPhone() bool {
	if o != nil && o.Phone.IsSet() {
		return true
	}

	return false
}

// SetPhone gets a reference to the given NullableString and assigns it to the Phone field.
func (o *EmailSignUpRequest) SetPhone(v string) {
	o.Phone.Set(&v)
}
// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *EmailSignUpRequest) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *EmailSignUpRequest) UnsetPhone() {
	o.Phone.Unset()
}

// GetPhoneCode returns the PhoneCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSignUpRequest) GetPhoneCode() string {
	if o == nil || IsNil(o.PhoneCode.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneCode.Get()
}

// GetPhoneCodeOk returns a tuple with the PhoneCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSignUpRequest) GetPhoneCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneCode.Get(), o.PhoneCode.IsSet()
}

// HasPhoneCode returns a boolean if a field has been set.
func (o *EmailSignUpRequest) HasPhoneCode() bool {
	if o != nil && o.PhoneCode.IsSet() {
		return true
	}

	return false
}

// SetPhoneCode gets a reference to the given NullableString and assigns it to the PhoneCode field.
func (o *EmailSignUpRequest) SetPhoneCode(v string) {
	o.PhoneCode.Set(&v)
}
// SetPhoneCodeNil sets the value for PhoneCode to be an explicit nil
func (o *EmailSignUpRequest) SetPhoneCodeNil() {
	o.PhoneCode.Set(nil)
}

// UnsetPhoneCode ensures that no value is present for PhoneCode, not even an explicit nil
func (o *EmailSignUpRequest) UnsetPhoneCode() {
	o.PhoneCode.Unset()
}

// GetNickName returns the NickName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSignUpRequest) GetNickName() string {
	if o == nil || IsNil(o.NickName.Get()) {
		var ret string
		return ret
	}
	return *o.NickName.Get()
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSignUpRequest) GetNickNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NickName.Get(), o.NickName.IsSet()
}

// HasNickName returns a boolean if a field has been set.
func (o *EmailSignUpRequest) HasNickName() bool {
	if o != nil && o.NickName.IsSet() {
		return true
	}

	return false
}

// SetNickName gets a reference to the given NullableString and assigns it to the NickName field.
func (o *EmailSignUpRequest) SetNickName(v string) {
	o.NickName.Set(&v)
}
// SetNickNameNil sets the value for NickName to be an explicit nil
func (o *EmailSignUpRequest) SetNickNameNil() {
	o.NickName.Set(nil)
}

// UnsetNickName ensures that no value is present for NickName, not even an explicit nil
func (o *EmailSignUpRequest) UnsetNickName() {
	o.NickName.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSignUpRequest) GetAvatar() string {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSignUpRequest) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *EmailSignUpRequest) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *EmailSignUpRequest) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *EmailSignUpRequest) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *EmailSignUpRequest) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailSignUpRequest) GetData() string {
	if o == nil || IsNil(o.Data.Get()) {
		var ret string
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailSignUpRequest) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *EmailSignUpRequest) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableString and assigns it to the Data field.
func (o *EmailSignUpRequest) SetData(v string) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *EmailSignUpRequest) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *EmailSignUpRequest) UnsetData() {
	o.Data.Unset()
}

func (o EmailSignUpRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSignUpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["pwd"] = o.Pwd
	if o.EmailCode.IsSet() {
		toSerialize["emailCode"] = o.EmailCode.Get()
	}
	if o.Phone.IsSet() {
		toSerialize["phone"] = o.Phone.Get()
	}
	if o.PhoneCode.IsSet() {
		toSerialize["phoneCode"] = o.PhoneCode.Get()
	}
	if o.NickName.IsSet() {
		toSerialize["nickName"] = o.NickName.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	return toSerialize, nil
}

func (o *EmailSignUpRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"pwd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailSignUpRequest := _EmailSignUpRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailSignUpRequest)

	if err != nil {
		return err
	}

	*o = EmailSignUpRequest(varEmailSignUpRequest)

	return err
}

type NullableEmailSignUpRequest struct {
	value *EmailSignUpRequest
	isSet bool
}

func (v NullableEmailSignUpRequest) Get() *EmailSignUpRequest {
	return v.value
}

func (v *NullableEmailSignUpRequest) Set(val *EmailSignUpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSignUpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSignUpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSignUpRequest(val *EmailSignUpRequest) *NullableEmailSignUpRequest {
	return &NullableEmailSignUpRequest{value: val, isSet: true}
}

func (v NullableEmailSignUpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSignUpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


