/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the CommonFriendModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonFriendModel{}

// CommonFriendModel struct for CommonFriendModel
type CommonFriendModel struct {
	UserID *int64 `json:"userID,omitempty"`
	NickName NullableString `json:"nickName,omitempty"`
	Avatar NullableString `json:"avatar,omitempty"`
}

// NewCommonFriendModel instantiates a new CommonFriendModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonFriendModel() *CommonFriendModel {
	this := CommonFriendModel{}
	return &this
}

// NewCommonFriendModelWithDefaults instantiates a new CommonFriendModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonFriendModelWithDefaults() *CommonFriendModel {
	this := CommonFriendModel{}
	return &this
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *CommonFriendModel) GetUserID() int64 {
	if o == nil || IsNil(o.UserID) {
		var ret int64
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonFriendModel) GetUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *CommonFriendModel) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given int64 and assigns it to the UserID field.
func (o *CommonFriendModel) SetUserID(v int64) {
	o.UserID = &v
}

// GetNickName returns the NickName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonFriendModel) GetNickName() string {
	if o == nil || IsNil(o.NickName.Get()) {
		var ret string
		return ret
	}
	return *o.NickName.Get()
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonFriendModel) GetNickNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NickName.Get(), o.NickName.IsSet()
}

// HasNickName returns a boolean if a field has been set.
func (o *CommonFriendModel) HasNickName() bool {
	if o != nil && o.NickName.IsSet() {
		return true
	}

	return false
}

// SetNickName gets a reference to the given NullableString and assigns it to the NickName field.
func (o *CommonFriendModel) SetNickName(v string) {
	o.NickName.Set(&v)
}
// SetNickNameNil sets the value for NickName to be an explicit nil
func (o *CommonFriendModel) SetNickNameNil() {
	o.NickName.Set(nil)
}

// UnsetNickName ensures that no value is present for NickName, not even an explicit nil
func (o *CommonFriendModel) UnsetNickName() {
	o.NickName.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonFriendModel) GetAvatar() string {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonFriendModel) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *CommonFriendModel) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *CommonFriendModel) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *CommonFriendModel) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *CommonFriendModel) UnsetAvatar() {
	o.Avatar.Unset()
}

func (o CommonFriendModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonFriendModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if o.NickName.IsSet() {
		toSerialize["nickName"] = o.NickName.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	return toSerialize, nil
}

type NullableCommonFriendModel struct {
	value *CommonFriendModel
	isSet bool
}

func (v NullableCommonFriendModel) Get() *CommonFriendModel {
	return v.value
}

func (v *NullableCommonFriendModel) Set(val *CommonFriendModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonFriendModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonFriendModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonFriendModel(val *CommonFriendModel) *NullableCommonFriendModel {
	return &NullableCommonFriendModel{value: val, isSet: true}
}

func (v NullableCommonFriendModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonFriendModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


