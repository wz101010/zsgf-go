/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the CurrencyExchangeRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyExchangeRate{}

// CurrencyExchangeRate 货币兑换比率实体，用于表示不同货币之间的兑换关系。
type CurrencyExchangeRate struct {
	// 货币兑换比率的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 兑换的源货币代码，例如 'USD'。
	FromCurrencyCode NullableString `json:"fromCurrencyCode,omitempty"`
	// 兑换的目标货币代码，例如 'CNY'。
	ToCurrencyCode NullableString `json:"toCurrencyCode,omitempty"`
	// 从源货币到目标货币的兑换比率。例如，1 USD = 6.5 CNY。
	ExchangeRate *int64 `json:"exchangeRate,omitempty"`
	// 兑换比率的详细描述信息。
	Description NullableString `json:"description,omitempty"`
	// 货币兑换比率的创建日期，默认为当前时间。
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 货币兑换比率的最后更新日期，默认为当前时间。
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewCurrencyExchangeRate instantiates a new CurrencyExchangeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyExchangeRate() *CurrencyExchangeRate {
	this := CurrencyExchangeRate{}
	return &this
}

// NewCurrencyExchangeRateWithDefaults instantiates a new CurrencyExchangeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyExchangeRateWithDefaults() *CurrencyExchangeRate {
	this := CurrencyExchangeRate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CurrencyExchangeRate) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyExchangeRate) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CurrencyExchangeRate) SetId(v int64) {
	o.Id = &v
}

// GetFromCurrencyCode returns the FromCurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyExchangeRate) GetFromCurrencyCode() string {
	if o == nil || IsNil(o.FromCurrencyCode.Get()) {
		var ret string
		return ret
	}
	return *o.FromCurrencyCode.Get()
}

// GetFromCurrencyCodeOk returns a tuple with the FromCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyExchangeRate) GetFromCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromCurrencyCode.Get(), o.FromCurrencyCode.IsSet()
}

// HasFromCurrencyCode returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasFromCurrencyCode() bool {
	if o != nil && o.FromCurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetFromCurrencyCode gets a reference to the given NullableString and assigns it to the FromCurrencyCode field.
func (o *CurrencyExchangeRate) SetFromCurrencyCode(v string) {
	o.FromCurrencyCode.Set(&v)
}
// SetFromCurrencyCodeNil sets the value for FromCurrencyCode to be an explicit nil
func (o *CurrencyExchangeRate) SetFromCurrencyCodeNil() {
	o.FromCurrencyCode.Set(nil)
}

// UnsetFromCurrencyCode ensures that no value is present for FromCurrencyCode, not even an explicit nil
func (o *CurrencyExchangeRate) UnsetFromCurrencyCode() {
	o.FromCurrencyCode.Unset()
}

// GetToCurrencyCode returns the ToCurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyExchangeRate) GetToCurrencyCode() string {
	if o == nil || IsNil(o.ToCurrencyCode.Get()) {
		var ret string
		return ret
	}
	return *o.ToCurrencyCode.Get()
}

// GetToCurrencyCodeOk returns a tuple with the ToCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyExchangeRate) GetToCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToCurrencyCode.Get(), o.ToCurrencyCode.IsSet()
}

// HasToCurrencyCode returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasToCurrencyCode() bool {
	if o != nil && o.ToCurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetToCurrencyCode gets a reference to the given NullableString and assigns it to the ToCurrencyCode field.
func (o *CurrencyExchangeRate) SetToCurrencyCode(v string) {
	o.ToCurrencyCode.Set(&v)
}
// SetToCurrencyCodeNil sets the value for ToCurrencyCode to be an explicit nil
func (o *CurrencyExchangeRate) SetToCurrencyCodeNil() {
	o.ToCurrencyCode.Set(nil)
}

// UnsetToCurrencyCode ensures that no value is present for ToCurrencyCode, not even an explicit nil
func (o *CurrencyExchangeRate) UnsetToCurrencyCode() {
	o.ToCurrencyCode.Unset()
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *CurrencyExchangeRate) GetExchangeRate() int64 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret int64
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyExchangeRate) GetExchangeRateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given int64 and assigns it to the ExchangeRate field.
func (o *CurrencyExchangeRate) SetExchangeRate(v int64) {
	o.ExchangeRate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyExchangeRate) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyExchangeRate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CurrencyExchangeRate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CurrencyExchangeRate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CurrencyExchangeRate) UnsetDescription() {
	o.Description.Unset()
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *CurrencyExchangeRate) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyExchangeRate) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *CurrencyExchangeRate) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *CurrencyExchangeRate) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyExchangeRate) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *CurrencyExchangeRate) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *CurrencyExchangeRate) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o CurrencyExchangeRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyExchangeRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.FromCurrencyCode.IsSet() {
		toSerialize["fromCurrencyCode"] = o.FromCurrencyCode.Get()
	}
	if o.ToCurrencyCode.IsSet() {
		toSerialize["toCurrencyCode"] = o.ToCurrencyCode.Get()
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableCurrencyExchangeRate struct {
	value *CurrencyExchangeRate
	isSet bool
}

func (v NullableCurrencyExchangeRate) Get() *CurrencyExchangeRate {
	return v.value
}

func (v *NullableCurrencyExchangeRate) Set(val *CurrencyExchangeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyExchangeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyExchangeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyExchangeRate(val *CurrencyExchangeRate) *NullableCurrencyExchangeRate {
	return &NullableCurrencyExchangeRate{value: val, isSet: true}
}

func (v NullableCurrencyExchangeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyExchangeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


