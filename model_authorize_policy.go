/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the AuthorizePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizePolicy{}

// AuthorizePolicy 鉴权策略实体，用于定义和管理系统的鉴权规则。
type AuthorizePolicy struct {
	// 鉴权策略的唯一标识符。
	Id *int64 `json:"id,omitempty"`
	// 鉴权策略的名称。根据鉴权类型填写不同的名称：角色类型填写角色名称，用户类型填写用户ID，访问令牌类型填写令牌ID。
	PolicyName NullableString `json:"policyName,omitempty"`
	// 鉴权策略的类型，可选值为 'access_token', 'user', 或 'role'。
	AuthorizeType NullableString `json:"authorizeType,omitempty"`
	// 与鉴权策略关联的权限集合，多个权限可以用逗号分隔。
	PolicyValue NullableString `json:"policyValue,omitempty"`
	// 鉴权策略的创建日期，默认为当前时间。
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 鉴权策略的最后更新日期，默认为当前时间。
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewAuthorizePolicy instantiates a new AuthorizePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizePolicy() *AuthorizePolicy {
	this := AuthorizePolicy{}
	return &this
}

// NewAuthorizePolicyWithDefaults instantiates a new AuthorizePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizePolicyWithDefaults() *AuthorizePolicy {
	this := AuthorizePolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthorizePolicy) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizePolicy) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthorizePolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AuthorizePolicy) SetId(v int64) {
	o.Id = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizePolicy) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName.Get()) {
		var ret string
		return ret
	}
	return *o.PolicyName.Get()
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizePolicy) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyName.Get(), o.PolicyName.IsSet()
}

// HasPolicyName returns a boolean if a field has been set.
func (o *AuthorizePolicy) HasPolicyName() bool {
	if o != nil && o.PolicyName.IsSet() {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given NullableString and assigns it to the PolicyName field.
func (o *AuthorizePolicy) SetPolicyName(v string) {
	o.PolicyName.Set(&v)
}
// SetPolicyNameNil sets the value for PolicyName to be an explicit nil
func (o *AuthorizePolicy) SetPolicyNameNil() {
	o.PolicyName.Set(nil)
}

// UnsetPolicyName ensures that no value is present for PolicyName, not even an explicit nil
func (o *AuthorizePolicy) UnsetPolicyName() {
	o.PolicyName.Unset()
}

// GetAuthorizeType returns the AuthorizeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizePolicy) GetAuthorizeType() string {
	if o == nil || IsNil(o.AuthorizeType.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorizeType.Get()
}

// GetAuthorizeTypeOk returns a tuple with the AuthorizeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizePolicy) GetAuthorizeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorizeType.Get(), o.AuthorizeType.IsSet()
}

// HasAuthorizeType returns a boolean if a field has been set.
func (o *AuthorizePolicy) HasAuthorizeType() bool {
	if o != nil && o.AuthorizeType.IsSet() {
		return true
	}

	return false
}

// SetAuthorizeType gets a reference to the given NullableString and assigns it to the AuthorizeType field.
func (o *AuthorizePolicy) SetAuthorizeType(v string) {
	o.AuthorizeType.Set(&v)
}
// SetAuthorizeTypeNil sets the value for AuthorizeType to be an explicit nil
func (o *AuthorizePolicy) SetAuthorizeTypeNil() {
	o.AuthorizeType.Set(nil)
}

// UnsetAuthorizeType ensures that no value is present for AuthorizeType, not even an explicit nil
func (o *AuthorizePolicy) UnsetAuthorizeType() {
	o.AuthorizeType.Unset()
}

// GetPolicyValue returns the PolicyValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizePolicy) GetPolicyValue() string {
	if o == nil || IsNil(o.PolicyValue.Get()) {
		var ret string
		return ret
	}
	return *o.PolicyValue.Get()
}

// GetPolicyValueOk returns a tuple with the PolicyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizePolicy) GetPolicyValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyValue.Get(), o.PolicyValue.IsSet()
}

// HasPolicyValue returns a boolean if a field has been set.
func (o *AuthorizePolicy) HasPolicyValue() bool {
	if o != nil && o.PolicyValue.IsSet() {
		return true
	}

	return false
}

// SetPolicyValue gets a reference to the given NullableString and assigns it to the PolicyValue field.
func (o *AuthorizePolicy) SetPolicyValue(v string) {
	o.PolicyValue.Set(&v)
}
// SetPolicyValueNil sets the value for PolicyValue to be an explicit nil
func (o *AuthorizePolicy) SetPolicyValueNil() {
	o.PolicyValue.Set(nil)
}

// UnsetPolicyValue ensures that no value is present for PolicyValue, not even an explicit nil
func (o *AuthorizePolicy) UnsetPolicyValue() {
	o.PolicyValue.Unset()
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *AuthorizePolicy) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizePolicy) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *AuthorizePolicy) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *AuthorizePolicy) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *AuthorizePolicy) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizePolicy) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *AuthorizePolicy) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *AuthorizePolicy) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o AuthorizePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.PolicyName.IsSet() {
		toSerialize["policyName"] = o.PolicyName.Get()
	}
	if o.AuthorizeType.IsSet() {
		toSerialize["authorizeType"] = o.AuthorizeType.Get()
	}
	if o.PolicyValue.IsSet() {
		toSerialize["policyValue"] = o.PolicyValue.Get()
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableAuthorizePolicy struct {
	value *AuthorizePolicy
	isSet bool
}

func (v NullableAuthorizePolicy) Get() *AuthorizePolicy {
	return v.value
}

func (v *NullableAuthorizePolicy) Set(val *AuthorizePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizePolicy(val *AuthorizePolicy) *NullableAuthorizePolicy {
	return &NullableAuthorizePolicy{value: val, isSet: true}
}

func (v NullableAuthorizePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


