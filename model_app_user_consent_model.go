/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the AppUserConsentModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppUserConsentModel{}

// AppUserConsentModel struct for AppUserConsentModel
type AppUserConsentModel struct {
	Id *int64 `json:"id,omitempty"`
	CreateDate *time.Time `json:"createDate,omitempty"`
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
	GrantType NullableString `json:"grantType,omitempty"`
	RedirectUri NullableString `json:"redirectUri,omitempty"`
	Remark NullableString `json:"remark,omitempty"`
	Scopes NullableString `json:"scopes,omitempty"`
}

// NewAppUserConsentModel instantiates a new AppUserConsentModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppUserConsentModel() *AppUserConsentModel {
	this := AppUserConsentModel{}
	return &this
}

// NewAppUserConsentModelWithDefaults instantiates a new AppUserConsentModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppUserConsentModelWithDefaults() *AppUserConsentModel {
	this := AppUserConsentModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppUserConsentModel) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUserConsentModel) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AppUserConsentModel) SetId(v int64) {
	o.Id = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *AppUserConsentModel) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUserConsentModel) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *AppUserConsentModel) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *AppUserConsentModel) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUserConsentModel) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *AppUserConsentModel) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

// GetGrantType returns the GrantType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUserConsentModel) GetGrantType() string {
	if o == nil || IsNil(o.GrantType.Get()) {
		var ret string
		return ret
	}
	return *o.GrantType.Get()
}

// GetGrantTypeOk returns a tuple with the GrantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUserConsentModel) GetGrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrantType.Get(), o.GrantType.IsSet()
}

// HasGrantType returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasGrantType() bool {
	if o != nil && o.GrantType.IsSet() {
		return true
	}

	return false
}

// SetGrantType gets a reference to the given NullableString and assigns it to the GrantType field.
func (o *AppUserConsentModel) SetGrantType(v string) {
	o.GrantType.Set(&v)
}
// SetGrantTypeNil sets the value for GrantType to be an explicit nil
func (o *AppUserConsentModel) SetGrantTypeNil() {
	o.GrantType.Set(nil)
}

// UnsetGrantType ensures that no value is present for GrantType, not even an explicit nil
func (o *AppUserConsentModel) UnsetGrantType() {
	o.GrantType.Unset()
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUserConsentModel) GetRedirectUri() string {
	if o == nil || IsNil(o.RedirectUri.Get()) {
		var ret string
		return ret
	}
	return *o.RedirectUri.Get()
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUserConsentModel) GetRedirectUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUri.Get(), o.RedirectUri.IsSet()
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasRedirectUri() bool {
	if o != nil && o.RedirectUri.IsSet() {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given NullableString and assigns it to the RedirectUri field.
func (o *AppUserConsentModel) SetRedirectUri(v string) {
	o.RedirectUri.Set(&v)
}
// SetRedirectUriNil sets the value for RedirectUri to be an explicit nil
func (o *AppUserConsentModel) SetRedirectUriNil() {
	o.RedirectUri.Set(nil)
}

// UnsetRedirectUri ensures that no value is present for RedirectUri, not even an explicit nil
func (o *AppUserConsentModel) UnsetRedirectUri() {
	o.RedirectUri.Unset()
}

// GetRemark returns the Remark field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUserConsentModel) GetRemark() string {
	if o == nil || IsNil(o.Remark.Get()) {
		var ret string
		return ret
	}
	return *o.Remark.Get()
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUserConsentModel) GetRemarkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remark.Get(), o.Remark.IsSet()
}

// HasRemark returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasRemark() bool {
	if o != nil && o.Remark.IsSet() {
		return true
	}

	return false
}

// SetRemark gets a reference to the given NullableString and assigns it to the Remark field.
func (o *AppUserConsentModel) SetRemark(v string) {
	o.Remark.Set(&v)
}
// SetRemarkNil sets the value for Remark to be an explicit nil
func (o *AppUserConsentModel) SetRemarkNil() {
	o.Remark.Set(nil)
}

// UnsetRemark ensures that no value is present for Remark, not even an explicit nil
func (o *AppUserConsentModel) UnsetRemark() {
	o.Remark.Unset()
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUserConsentModel) GetScopes() string {
	if o == nil || IsNil(o.Scopes.Get()) {
		var ret string
		return ret
	}
	return *o.Scopes.Get()
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUserConsentModel) GetScopesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes.Get(), o.Scopes.IsSet()
}

// HasScopes returns a boolean if a field has been set.
func (o *AppUserConsentModel) HasScopes() bool {
	if o != nil && o.Scopes.IsSet() {
		return true
	}

	return false
}

// SetScopes gets a reference to the given NullableString and assigns it to the Scopes field.
func (o *AppUserConsentModel) SetScopes(v string) {
	o.Scopes.Set(&v)
}
// SetScopesNil sets the value for Scopes to be an explicit nil
func (o *AppUserConsentModel) SetScopesNil() {
	o.Scopes.Set(nil)
}

// UnsetScopes ensures that no value is present for Scopes, not even an explicit nil
func (o *AppUserConsentModel) UnsetScopes() {
	o.Scopes.Unset()
}

func (o AppUserConsentModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppUserConsentModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	if o.GrantType.IsSet() {
		toSerialize["grantType"] = o.GrantType.Get()
	}
	if o.RedirectUri.IsSet() {
		toSerialize["redirectUri"] = o.RedirectUri.Get()
	}
	if o.Remark.IsSet() {
		toSerialize["remark"] = o.Remark.Get()
	}
	if o.Scopes.IsSet() {
		toSerialize["scopes"] = o.Scopes.Get()
	}
	return toSerialize, nil
}

type NullableAppUserConsentModel struct {
	value *AppUserConsentModel
	isSet bool
}

func (v NullableAppUserConsentModel) Get() *AppUserConsentModel {
	return v.value
}

func (v *NullableAppUserConsentModel) Set(val *AppUserConsentModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUserConsentModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUserConsentModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUserConsentModel(val *AppUserConsentModel) *NullableAppUserConsentModel {
	return &NullableAppUserConsentModel{value: val, isSet: true}
}

func (v NullableAppUserConsentModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUserConsentModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


