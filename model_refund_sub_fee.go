/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the RefundSubFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefundSubFee{}

// RefundSubFee struct for RefundSubFee
type RefundSubFee struct {
	RefundChargeFee NullableString `json:"refundChargeFee,omitempty"`
	SwitchFeeRate NullableString `json:"switchFeeRate,omitempty"`
}

// NewRefundSubFee instantiates a new RefundSubFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundSubFee() *RefundSubFee {
	this := RefundSubFee{}
	return &this
}

// NewRefundSubFeeWithDefaults instantiates a new RefundSubFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundSubFeeWithDefaults() *RefundSubFee {
	this := RefundSubFee{}
	return &this
}

// GetRefundChargeFee returns the RefundChargeFee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RefundSubFee) GetRefundChargeFee() string {
	if o == nil || IsNil(o.RefundChargeFee.Get()) {
		var ret string
		return ret
	}
	return *o.RefundChargeFee.Get()
}

// GetRefundChargeFeeOk returns a tuple with the RefundChargeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RefundSubFee) GetRefundChargeFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundChargeFee.Get(), o.RefundChargeFee.IsSet()
}

// HasRefundChargeFee returns a boolean if a field has been set.
func (o *RefundSubFee) HasRefundChargeFee() bool {
	if o != nil && o.RefundChargeFee.IsSet() {
		return true
	}

	return false
}

// SetRefundChargeFee gets a reference to the given NullableString and assigns it to the RefundChargeFee field.
func (o *RefundSubFee) SetRefundChargeFee(v string) {
	o.RefundChargeFee.Set(&v)
}
// SetRefundChargeFeeNil sets the value for RefundChargeFee to be an explicit nil
func (o *RefundSubFee) SetRefundChargeFeeNil() {
	o.RefundChargeFee.Set(nil)
}

// UnsetRefundChargeFee ensures that no value is present for RefundChargeFee, not even an explicit nil
func (o *RefundSubFee) UnsetRefundChargeFee() {
	o.RefundChargeFee.Unset()
}

// GetSwitchFeeRate returns the SwitchFeeRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RefundSubFee) GetSwitchFeeRate() string {
	if o == nil || IsNil(o.SwitchFeeRate.Get()) {
		var ret string
		return ret
	}
	return *o.SwitchFeeRate.Get()
}

// GetSwitchFeeRateOk returns a tuple with the SwitchFeeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RefundSubFee) GetSwitchFeeRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwitchFeeRate.Get(), o.SwitchFeeRate.IsSet()
}

// HasSwitchFeeRate returns a boolean if a field has been set.
func (o *RefundSubFee) HasSwitchFeeRate() bool {
	if o != nil && o.SwitchFeeRate.IsSet() {
		return true
	}

	return false
}

// SetSwitchFeeRate gets a reference to the given NullableString and assigns it to the SwitchFeeRate field.
func (o *RefundSubFee) SetSwitchFeeRate(v string) {
	o.SwitchFeeRate.Set(&v)
}
// SetSwitchFeeRateNil sets the value for SwitchFeeRate to be an explicit nil
func (o *RefundSubFee) SetSwitchFeeRateNil() {
	o.SwitchFeeRate.Set(nil)
}

// UnsetSwitchFeeRate ensures that no value is present for SwitchFeeRate, not even an explicit nil
func (o *RefundSubFee) UnsetSwitchFeeRate() {
	o.SwitchFeeRate.Unset()
}

func (o RefundSubFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundSubFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RefundChargeFee.IsSet() {
		toSerialize["refundChargeFee"] = o.RefundChargeFee.Get()
	}
	if o.SwitchFeeRate.IsSet() {
		toSerialize["switchFeeRate"] = o.SwitchFeeRate.Get()
	}
	return toSerialize, nil
}

type NullableRefundSubFee struct {
	value *RefundSubFee
	isSet bool
}

func (v NullableRefundSubFee) Get() *RefundSubFee {
	return v.value
}

func (v *NullableRefundSubFee) Set(val *RefundSubFee) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundSubFee) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundSubFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundSubFee(val *RefundSubFee) *NullableRefundSubFee {
	return &NullableRefundSubFee{value: val, isSet: true}
}

func (v NullableRefundSubFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundSubFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


