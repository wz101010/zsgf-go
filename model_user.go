/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User 用户
type User struct {
	// 用户唯一标识
	Id *int64 `json:"id,omitempty"`
	// 用户所在平台
	Platform NullableString `json:"platform,omitempty"`
	// 用户所在平台的唯一标识
	UnionID NullableString `json:"unionID,omitempty"`
	// 昵称
	NickName NullableString `json:"nickName,omitempty"`
	// 头像
	Avatar NullableString `json:"avatar,omitempty"`
	// 其他数据
	Data NullableString `json:"data,omitempty"`
	// 用户名
	UserName NullableString `json:"userName,omitempty"`
	// 用户密码
	Pwd NullableString `json:"pwd,omitempty"`
	// 邮箱地址
	Email NullableString `json:"email,omitempty"`
	// 邮箱已验证
	EmailIsValid *bool `json:"emailIsValid,omitempty"`
	// 手机号码
	Phone NullableString `json:"phone,omitempty"`
	// 手机号码已验证
	PhoneIsValid *bool `json:"phoneIsValid,omitempty"`
	// 关系链
	RelationChain NullableString `json:"relationChain,omitempty"`
	// 兴趣标签
	InterestTags NullableString `json:"interestTags,omitempty"`
	// 个人简介
	Biography NullableString `json:"biography,omitempty"`
	// 性别
	Gender NullableString `json:"gender,omitempty"`
	// 生日
	Birthday NullableTime `json:"birthday,omitempty"`
	// 职业
	Occupation NullableString `json:"occupation,omitempty"`
	// 学历
	Education NullableString `json:"education,omitempty"`
	// 联系方式
	Contact NullableString `json:"contact,omitempty"`
	// 语言
	Languages NullableString `json:"languages,omitempty"`
	// 社交网络链接
	SocialLinks NullableString `json:"socialLinks,omitempty"`
	// 婚姻状态
	RelationshipStatus NullableString `json:"relationshipStatus,omitempty"`
	// 公司
	Company NullableString `json:"company,omitempty"`
	// 行业
	Industry NullableString `json:"industry,omitempty"`
	// 行业职位
	CompanyPosition NullableString `json:"companyPosition,omitempty"`
	// 私密设置
	PrivateSettings NullableString `json:"privateSettings,omitempty"`
	// 账户是否锁定
	IsLock *bool `json:"isLock,omitempty"`
	// 账户锁定截止时间
	LockUntil *time.Time `json:"lockUntil,omitempty"`
	// 能使用用户名登录
	EnableUserNameSignIn *bool `json:"enableUserNameSignIn,omitempty"`
	// 能使用邮箱登录
	EnableEmailSignIn *bool `json:"enableEmailSignIn,omitempty"`
	// 能使用电话号码登录
	EnablePhoneSignIn *bool `json:"enablePhoneSignIn,omitempty"`
	// 能使用联合身份标识登录
	EnableUnionIDSignIn *bool `json:"enableUnionIDSignIn,omitempty"`
	// 能使用OAuth认证方式登录
	EnableOAuth *bool `json:"enableOAuth,omitempty"`
	// 启用双因素认证登录
	Enable2FAAuth *bool `json:"enable2FAAuth,omitempty"`
	// 创建时间
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 最后更新时间
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *User) SetId(v int64) {
	o.Id = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPlatform() string {
	if o == nil || IsNil(o.Platform.Get()) {
		var ret string
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *User) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableString and assigns it to the Platform field.
func (o *User) SetPlatform(v string) {
	o.Platform.Set(&v)
}
// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *User) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *User) UnsetPlatform() {
	o.Platform.Unset()
}

// GetUnionID returns the UnionID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetUnionID() string {
	if o == nil || IsNil(o.UnionID.Get()) {
		var ret string
		return ret
	}
	return *o.UnionID.Get()
}

// GetUnionIDOk returns a tuple with the UnionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetUnionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnionID.Get(), o.UnionID.IsSet()
}

// HasUnionID returns a boolean if a field has been set.
func (o *User) HasUnionID() bool {
	if o != nil && o.UnionID.IsSet() {
		return true
	}

	return false
}

// SetUnionID gets a reference to the given NullableString and assigns it to the UnionID field.
func (o *User) SetUnionID(v string) {
	o.UnionID.Set(&v)
}
// SetUnionIDNil sets the value for UnionID to be an explicit nil
func (o *User) SetUnionIDNil() {
	o.UnionID.Set(nil)
}

// UnsetUnionID ensures that no value is present for UnionID, not even an explicit nil
func (o *User) UnsetUnionID() {
	o.UnionID.Unset()
}

// GetNickName returns the NickName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetNickName() string {
	if o == nil || IsNil(o.NickName.Get()) {
		var ret string
		return ret
	}
	return *o.NickName.Get()
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetNickNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NickName.Get(), o.NickName.IsSet()
}

// HasNickName returns a boolean if a field has been set.
func (o *User) HasNickName() bool {
	if o != nil && o.NickName.IsSet() {
		return true
	}

	return false
}

// SetNickName gets a reference to the given NullableString and assigns it to the NickName field.
func (o *User) SetNickName(v string) {
	o.NickName.Set(&v)
}
// SetNickNameNil sets the value for NickName to be an explicit nil
func (o *User) SetNickNameNil() {
	o.NickName.Set(nil)
}

// UnsetNickName ensures that no value is present for NickName, not even an explicit nil
func (o *User) UnsetNickName() {
	o.NickName.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetAvatar() string {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *User) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *User) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *User) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *User) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetData() string {
	if o == nil || IsNil(o.Data.Get()) {
		var ret string
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *User) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableString and assigns it to the Data field.
func (o *User) SetData(v string) {
	o.Data.Set(&v)
}
// SetDataNil sets the value for Data to be an explicit nil
func (o *User) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *User) UnsetData() {
	o.Data.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *User) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *User) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *User) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *User) UnsetUserName() {
	o.UserName.Unset()
}

// GetPwd returns the Pwd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPwd() string {
	if o == nil || IsNil(o.Pwd.Get()) {
		var ret string
		return ret
	}
	return *o.Pwd.Get()
}

// GetPwdOk returns a tuple with the Pwd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPwdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pwd.Get(), o.Pwd.IsSet()
}

// HasPwd returns a boolean if a field has been set.
func (o *User) HasPwd() bool {
	if o != nil && o.Pwd.IsSet() {
		return true
	}

	return false
}

// SetPwd gets a reference to the given NullableString and assigns it to the Pwd field.
func (o *User) SetPwd(v string) {
	o.Pwd.Set(&v)
}
// SetPwdNil sets the value for Pwd to be an explicit nil
func (o *User) SetPwdNil() {
	o.Pwd.Set(nil)
}

// UnsetPwd ensures that no value is present for Pwd, not even an explicit nil
func (o *User) UnsetPwd() {
	o.Pwd.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *User) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *User) UnsetEmail() {
	o.Email.Unset()
}

// GetEmailIsValid returns the EmailIsValid field value if set, zero value otherwise.
func (o *User) GetEmailIsValid() bool {
	if o == nil || IsNil(o.EmailIsValid) {
		var ret bool
		return ret
	}
	return *o.EmailIsValid
}

// GetEmailIsValidOk returns a tuple with the EmailIsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailIsValid) {
		return nil, false
	}
	return o.EmailIsValid, true
}

// HasEmailIsValid returns a boolean if a field has been set.
func (o *User) HasEmailIsValid() bool {
	if o != nil && !IsNil(o.EmailIsValid) {
		return true
	}

	return false
}

// SetEmailIsValid gets a reference to the given bool and assigns it to the EmailIsValid field.
func (o *User) SetEmailIsValid(v bool) {
	o.EmailIsValid = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPhone() string {
	if o == nil || IsNil(o.Phone.Get()) {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field has been set.
func (o *User) HasPhone() bool {
	if o != nil && o.Phone.IsSet() {
		return true
	}

	return false
}

// SetPhone gets a reference to the given NullableString and assigns it to the Phone field.
func (o *User) SetPhone(v string) {
	o.Phone.Set(&v)
}
// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *User) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *User) UnsetPhone() {
	o.Phone.Unset()
}

// GetPhoneIsValid returns the PhoneIsValid field value if set, zero value otherwise.
func (o *User) GetPhoneIsValid() bool {
	if o == nil || IsNil(o.PhoneIsValid) {
		var ret bool
		return ret
	}
	return *o.PhoneIsValid
}

// GetPhoneIsValidOk returns a tuple with the PhoneIsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhoneIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.PhoneIsValid) {
		return nil, false
	}
	return o.PhoneIsValid, true
}

// HasPhoneIsValid returns a boolean if a field has been set.
func (o *User) HasPhoneIsValid() bool {
	if o != nil && !IsNil(o.PhoneIsValid) {
		return true
	}

	return false
}

// SetPhoneIsValid gets a reference to the given bool and assigns it to the PhoneIsValid field.
func (o *User) SetPhoneIsValid(v bool) {
	o.PhoneIsValid = &v
}

// GetRelationChain returns the RelationChain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetRelationChain() string {
	if o == nil || IsNil(o.RelationChain.Get()) {
		var ret string
		return ret
	}
	return *o.RelationChain.Get()
}

// GetRelationChainOk returns a tuple with the RelationChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetRelationChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelationChain.Get(), o.RelationChain.IsSet()
}

// HasRelationChain returns a boolean if a field has been set.
func (o *User) HasRelationChain() bool {
	if o != nil && o.RelationChain.IsSet() {
		return true
	}

	return false
}

// SetRelationChain gets a reference to the given NullableString and assigns it to the RelationChain field.
func (o *User) SetRelationChain(v string) {
	o.RelationChain.Set(&v)
}
// SetRelationChainNil sets the value for RelationChain to be an explicit nil
func (o *User) SetRelationChainNil() {
	o.RelationChain.Set(nil)
}

// UnsetRelationChain ensures that no value is present for RelationChain, not even an explicit nil
func (o *User) UnsetRelationChain() {
	o.RelationChain.Unset()
}

// GetInterestTags returns the InterestTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetInterestTags() string {
	if o == nil || IsNil(o.InterestTags.Get()) {
		var ret string
		return ret
	}
	return *o.InterestTags.Get()
}

// GetInterestTagsOk returns a tuple with the InterestTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetInterestTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterestTags.Get(), o.InterestTags.IsSet()
}

// HasInterestTags returns a boolean if a field has been set.
func (o *User) HasInterestTags() bool {
	if o != nil && o.InterestTags.IsSet() {
		return true
	}

	return false
}

// SetInterestTags gets a reference to the given NullableString and assigns it to the InterestTags field.
func (o *User) SetInterestTags(v string) {
	o.InterestTags.Set(&v)
}
// SetInterestTagsNil sets the value for InterestTags to be an explicit nil
func (o *User) SetInterestTagsNil() {
	o.InterestTags.Set(nil)
}

// UnsetInterestTags ensures that no value is present for InterestTags, not even an explicit nil
func (o *User) UnsetInterestTags() {
	o.InterestTags.Unset()
}

// GetBiography returns the Biography field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetBiography() string {
	if o == nil || IsNil(o.Biography.Get()) {
		var ret string
		return ret
	}
	return *o.Biography.Get()
}

// GetBiographyOk returns a tuple with the Biography field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetBiographyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Biography.Get(), o.Biography.IsSet()
}

// HasBiography returns a boolean if a field has been set.
func (o *User) HasBiography() bool {
	if o != nil && o.Biography.IsSet() {
		return true
	}

	return false
}

// SetBiography gets a reference to the given NullableString and assigns it to the Biography field.
func (o *User) SetBiography(v string) {
	o.Biography.Set(&v)
}
// SetBiographyNil sets the value for Biography to be an explicit nil
func (o *User) SetBiographyNil() {
	o.Biography.Set(nil)
}

// UnsetBiography ensures that no value is present for Biography, not even an explicit nil
func (o *User) UnsetBiography() {
	o.Biography.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetGender() string {
	if o == nil || IsNil(o.Gender.Get()) {
		var ret string
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *User) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableString and assigns it to the Gender field.
func (o *User) SetGender(v string) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *User) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *User) UnsetGender() {
	o.Gender.Unset()
}

// GetBirthday returns the Birthday field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetBirthday() time.Time {
	if o == nil || IsNil(o.Birthday.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Birthday.Get()
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetBirthdayOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Birthday.Get(), o.Birthday.IsSet()
}

// HasBirthday returns a boolean if a field has been set.
func (o *User) HasBirthday() bool {
	if o != nil && o.Birthday.IsSet() {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given NullableTime and assigns it to the Birthday field.
func (o *User) SetBirthday(v time.Time) {
	o.Birthday.Set(&v)
}
// SetBirthdayNil sets the value for Birthday to be an explicit nil
func (o *User) SetBirthdayNil() {
	o.Birthday.Set(nil)
}

// UnsetBirthday ensures that no value is present for Birthday, not even an explicit nil
func (o *User) UnsetBirthday() {
	o.Birthday.Unset()
}

// GetOccupation returns the Occupation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetOccupation() string {
	if o == nil || IsNil(o.Occupation.Get()) {
		var ret string
		return ret
	}
	return *o.Occupation.Get()
}

// GetOccupationOk returns a tuple with the Occupation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetOccupationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Occupation.Get(), o.Occupation.IsSet()
}

// HasOccupation returns a boolean if a field has been set.
func (o *User) HasOccupation() bool {
	if o != nil && o.Occupation.IsSet() {
		return true
	}

	return false
}

// SetOccupation gets a reference to the given NullableString and assigns it to the Occupation field.
func (o *User) SetOccupation(v string) {
	o.Occupation.Set(&v)
}
// SetOccupationNil sets the value for Occupation to be an explicit nil
func (o *User) SetOccupationNil() {
	o.Occupation.Set(nil)
}

// UnsetOccupation ensures that no value is present for Occupation, not even an explicit nil
func (o *User) UnsetOccupation() {
	o.Occupation.Unset()
}

// GetEducation returns the Education field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEducation() string {
	if o == nil || IsNil(o.Education.Get()) {
		var ret string
		return ret
	}
	return *o.Education.Get()
}

// GetEducationOk returns a tuple with the Education field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEducationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Education.Get(), o.Education.IsSet()
}

// HasEducation returns a boolean if a field has been set.
func (o *User) HasEducation() bool {
	if o != nil && o.Education.IsSet() {
		return true
	}

	return false
}

// SetEducation gets a reference to the given NullableString and assigns it to the Education field.
func (o *User) SetEducation(v string) {
	o.Education.Set(&v)
}
// SetEducationNil sets the value for Education to be an explicit nil
func (o *User) SetEducationNil() {
	o.Education.Set(nil)
}

// UnsetEducation ensures that no value is present for Education, not even an explicit nil
func (o *User) UnsetEducation() {
	o.Education.Unset()
}

// GetContact returns the Contact field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetContact() string {
	if o == nil || IsNil(o.Contact.Get()) {
		var ret string
		return ret
	}
	return *o.Contact.Get()
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetContactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contact.Get(), o.Contact.IsSet()
}

// HasContact returns a boolean if a field has been set.
func (o *User) HasContact() bool {
	if o != nil && o.Contact.IsSet() {
		return true
	}

	return false
}

// SetContact gets a reference to the given NullableString and assigns it to the Contact field.
func (o *User) SetContact(v string) {
	o.Contact.Set(&v)
}
// SetContactNil sets the value for Contact to be an explicit nil
func (o *User) SetContactNil() {
	o.Contact.Set(nil)
}

// UnsetContact ensures that no value is present for Contact, not even an explicit nil
func (o *User) UnsetContact() {
	o.Contact.Unset()
}

// GetLanguages returns the Languages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetLanguages() string {
	if o == nil || IsNil(o.Languages.Get()) {
		var ret string
		return ret
	}
	return *o.Languages.Get()
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetLanguagesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Languages.Get(), o.Languages.IsSet()
}

// HasLanguages returns a boolean if a field has been set.
func (o *User) HasLanguages() bool {
	if o != nil && o.Languages.IsSet() {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given NullableString and assigns it to the Languages field.
func (o *User) SetLanguages(v string) {
	o.Languages.Set(&v)
}
// SetLanguagesNil sets the value for Languages to be an explicit nil
func (o *User) SetLanguagesNil() {
	o.Languages.Set(nil)
}

// UnsetLanguages ensures that no value is present for Languages, not even an explicit nil
func (o *User) UnsetLanguages() {
	o.Languages.Unset()
}

// GetSocialLinks returns the SocialLinks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetSocialLinks() string {
	if o == nil || IsNil(o.SocialLinks.Get()) {
		var ret string
		return ret
	}
	return *o.SocialLinks.Get()
}

// GetSocialLinksOk returns a tuple with the SocialLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetSocialLinksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SocialLinks.Get(), o.SocialLinks.IsSet()
}

// HasSocialLinks returns a boolean if a field has been set.
func (o *User) HasSocialLinks() bool {
	if o != nil && o.SocialLinks.IsSet() {
		return true
	}

	return false
}

// SetSocialLinks gets a reference to the given NullableString and assigns it to the SocialLinks field.
func (o *User) SetSocialLinks(v string) {
	o.SocialLinks.Set(&v)
}
// SetSocialLinksNil sets the value for SocialLinks to be an explicit nil
func (o *User) SetSocialLinksNil() {
	o.SocialLinks.Set(nil)
}

// UnsetSocialLinks ensures that no value is present for SocialLinks, not even an explicit nil
func (o *User) UnsetSocialLinks() {
	o.SocialLinks.Unset()
}

// GetRelationshipStatus returns the RelationshipStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetRelationshipStatus() string {
	if o == nil || IsNil(o.RelationshipStatus.Get()) {
		var ret string
		return ret
	}
	return *o.RelationshipStatus.Get()
}

// GetRelationshipStatusOk returns a tuple with the RelationshipStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetRelationshipStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelationshipStatus.Get(), o.RelationshipStatus.IsSet()
}

// HasRelationshipStatus returns a boolean if a field has been set.
func (o *User) HasRelationshipStatus() bool {
	if o != nil && o.RelationshipStatus.IsSet() {
		return true
	}

	return false
}

// SetRelationshipStatus gets a reference to the given NullableString and assigns it to the RelationshipStatus field.
func (o *User) SetRelationshipStatus(v string) {
	o.RelationshipStatus.Set(&v)
}
// SetRelationshipStatusNil sets the value for RelationshipStatus to be an explicit nil
func (o *User) SetRelationshipStatusNil() {
	o.RelationshipStatus.Set(nil)
}

// UnsetRelationshipStatus ensures that no value is present for RelationshipStatus, not even an explicit nil
func (o *User) UnsetRelationshipStatus() {
	o.RelationshipStatus.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetCompany() string {
	if o == nil || IsNil(o.Company.Get()) {
		var ret string
		return ret
	}
	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// HasCompany returns a boolean if a field has been set.
func (o *User) HasCompany() bool {
	if o != nil && o.Company.IsSet() {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NullableString and assigns it to the Company field.
func (o *User) SetCompany(v string) {
	o.Company.Set(&v)
}
// SetCompanyNil sets the value for Company to be an explicit nil
func (o *User) SetCompanyNil() {
	o.Company.Set(nil)
}

// UnsetCompany ensures that no value is present for Company, not even an explicit nil
func (o *User) UnsetCompany() {
	o.Company.Unset()
}

// GetIndustry returns the Industry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetIndustry() string {
	if o == nil || IsNil(o.Industry.Get()) {
		var ret string
		return ret
	}
	return *o.Industry.Get()
}

// GetIndustryOk returns a tuple with the Industry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetIndustryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Industry.Get(), o.Industry.IsSet()
}

// HasIndustry returns a boolean if a field has been set.
func (o *User) HasIndustry() bool {
	if o != nil && o.Industry.IsSet() {
		return true
	}

	return false
}

// SetIndustry gets a reference to the given NullableString and assigns it to the Industry field.
func (o *User) SetIndustry(v string) {
	o.Industry.Set(&v)
}
// SetIndustryNil sets the value for Industry to be an explicit nil
func (o *User) SetIndustryNil() {
	o.Industry.Set(nil)
}

// UnsetIndustry ensures that no value is present for Industry, not even an explicit nil
func (o *User) UnsetIndustry() {
	o.Industry.Unset()
}

// GetCompanyPosition returns the CompanyPosition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetCompanyPosition() string {
	if o == nil || IsNil(o.CompanyPosition.Get()) {
		var ret string
		return ret
	}
	return *o.CompanyPosition.Get()
}

// GetCompanyPositionOk returns a tuple with the CompanyPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetCompanyPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyPosition.Get(), o.CompanyPosition.IsSet()
}

// HasCompanyPosition returns a boolean if a field has been set.
func (o *User) HasCompanyPosition() bool {
	if o != nil && o.CompanyPosition.IsSet() {
		return true
	}

	return false
}

// SetCompanyPosition gets a reference to the given NullableString and assigns it to the CompanyPosition field.
func (o *User) SetCompanyPosition(v string) {
	o.CompanyPosition.Set(&v)
}
// SetCompanyPositionNil sets the value for CompanyPosition to be an explicit nil
func (o *User) SetCompanyPositionNil() {
	o.CompanyPosition.Set(nil)
}

// UnsetCompanyPosition ensures that no value is present for CompanyPosition, not even an explicit nil
func (o *User) UnsetCompanyPosition() {
	o.CompanyPosition.Unset()
}

// GetPrivateSettings returns the PrivateSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPrivateSettings() string {
	if o == nil || IsNil(o.PrivateSettings.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateSettings.Get()
}

// GetPrivateSettingsOk returns a tuple with the PrivateSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPrivateSettingsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateSettings.Get(), o.PrivateSettings.IsSet()
}

// HasPrivateSettings returns a boolean if a field has been set.
func (o *User) HasPrivateSettings() bool {
	if o != nil && o.PrivateSettings.IsSet() {
		return true
	}

	return false
}

// SetPrivateSettings gets a reference to the given NullableString and assigns it to the PrivateSettings field.
func (o *User) SetPrivateSettings(v string) {
	o.PrivateSettings.Set(&v)
}
// SetPrivateSettingsNil sets the value for PrivateSettings to be an explicit nil
func (o *User) SetPrivateSettingsNil() {
	o.PrivateSettings.Set(nil)
}

// UnsetPrivateSettings ensures that no value is present for PrivateSettings, not even an explicit nil
func (o *User) UnsetPrivateSettings() {
	o.PrivateSettings.Unset()
}

// GetIsLock returns the IsLock field value if set, zero value otherwise.
func (o *User) GetIsLock() bool {
	if o == nil || IsNil(o.IsLock) {
		var ret bool
		return ret
	}
	return *o.IsLock
}

// GetIsLockOk returns a tuple with the IsLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsLockOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLock) {
		return nil, false
	}
	return o.IsLock, true
}

// HasIsLock returns a boolean if a field has been set.
func (o *User) HasIsLock() bool {
	if o != nil && !IsNil(o.IsLock) {
		return true
	}

	return false
}

// SetIsLock gets a reference to the given bool and assigns it to the IsLock field.
func (o *User) SetIsLock(v bool) {
	o.IsLock = &v
}

// GetLockUntil returns the LockUntil field value if set, zero value otherwise.
func (o *User) GetLockUntil() time.Time {
	if o == nil || IsNil(o.LockUntil) {
		var ret time.Time
		return ret
	}
	return *o.LockUntil
}

// GetLockUntilOk returns a tuple with the LockUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLockUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LockUntil) {
		return nil, false
	}
	return o.LockUntil, true
}

// HasLockUntil returns a boolean if a field has been set.
func (o *User) HasLockUntil() bool {
	if o != nil && !IsNil(o.LockUntil) {
		return true
	}

	return false
}

// SetLockUntil gets a reference to the given time.Time and assigns it to the LockUntil field.
func (o *User) SetLockUntil(v time.Time) {
	o.LockUntil = &v
}

// GetEnableUserNameSignIn returns the EnableUserNameSignIn field value if set, zero value otherwise.
func (o *User) GetEnableUserNameSignIn() bool {
	if o == nil || IsNil(o.EnableUserNameSignIn) {
		var ret bool
		return ret
	}
	return *o.EnableUserNameSignIn
}

// GetEnableUserNameSignInOk returns a tuple with the EnableUserNameSignIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnableUserNameSignInOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserNameSignIn) {
		return nil, false
	}
	return o.EnableUserNameSignIn, true
}

// HasEnableUserNameSignIn returns a boolean if a field has been set.
func (o *User) HasEnableUserNameSignIn() bool {
	if o != nil && !IsNil(o.EnableUserNameSignIn) {
		return true
	}

	return false
}

// SetEnableUserNameSignIn gets a reference to the given bool and assigns it to the EnableUserNameSignIn field.
func (o *User) SetEnableUserNameSignIn(v bool) {
	o.EnableUserNameSignIn = &v
}

// GetEnableEmailSignIn returns the EnableEmailSignIn field value if set, zero value otherwise.
func (o *User) GetEnableEmailSignIn() bool {
	if o == nil || IsNil(o.EnableEmailSignIn) {
		var ret bool
		return ret
	}
	return *o.EnableEmailSignIn
}

// GetEnableEmailSignInOk returns a tuple with the EnableEmailSignIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnableEmailSignInOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmailSignIn) {
		return nil, false
	}
	return o.EnableEmailSignIn, true
}

// HasEnableEmailSignIn returns a boolean if a field has been set.
func (o *User) HasEnableEmailSignIn() bool {
	if o != nil && !IsNil(o.EnableEmailSignIn) {
		return true
	}

	return false
}

// SetEnableEmailSignIn gets a reference to the given bool and assigns it to the EnableEmailSignIn field.
func (o *User) SetEnableEmailSignIn(v bool) {
	o.EnableEmailSignIn = &v
}

// GetEnablePhoneSignIn returns the EnablePhoneSignIn field value if set, zero value otherwise.
func (o *User) GetEnablePhoneSignIn() bool {
	if o == nil || IsNil(o.EnablePhoneSignIn) {
		var ret bool
		return ret
	}
	return *o.EnablePhoneSignIn
}

// GetEnablePhoneSignInOk returns a tuple with the EnablePhoneSignIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnablePhoneSignInOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePhoneSignIn) {
		return nil, false
	}
	return o.EnablePhoneSignIn, true
}

// HasEnablePhoneSignIn returns a boolean if a field has been set.
func (o *User) HasEnablePhoneSignIn() bool {
	if o != nil && !IsNil(o.EnablePhoneSignIn) {
		return true
	}

	return false
}

// SetEnablePhoneSignIn gets a reference to the given bool and assigns it to the EnablePhoneSignIn field.
func (o *User) SetEnablePhoneSignIn(v bool) {
	o.EnablePhoneSignIn = &v
}

// GetEnableUnionIDSignIn returns the EnableUnionIDSignIn field value if set, zero value otherwise.
func (o *User) GetEnableUnionIDSignIn() bool {
	if o == nil || IsNil(o.EnableUnionIDSignIn) {
		var ret bool
		return ret
	}
	return *o.EnableUnionIDSignIn
}

// GetEnableUnionIDSignInOk returns a tuple with the EnableUnionIDSignIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnableUnionIDSignInOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUnionIDSignIn) {
		return nil, false
	}
	return o.EnableUnionIDSignIn, true
}

// HasEnableUnionIDSignIn returns a boolean if a field has been set.
func (o *User) HasEnableUnionIDSignIn() bool {
	if o != nil && !IsNil(o.EnableUnionIDSignIn) {
		return true
	}

	return false
}

// SetEnableUnionIDSignIn gets a reference to the given bool and assigns it to the EnableUnionIDSignIn field.
func (o *User) SetEnableUnionIDSignIn(v bool) {
	o.EnableUnionIDSignIn = &v
}

// GetEnableOAuth returns the EnableOAuth field value if set, zero value otherwise.
func (o *User) GetEnableOAuth() bool {
	if o == nil || IsNil(o.EnableOAuth) {
		var ret bool
		return ret
	}
	return *o.EnableOAuth
}

// GetEnableOAuthOk returns a tuple with the EnableOAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnableOAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableOAuth) {
		return nil, false
	}
	return o.EnableOAuth, true
}

// HasEnableOAuth returns a boolean if a field has been set.
func (o *User) HasEnableOAuth() bool {
	if o != nil && !IsNil(o.EnableOAuth) {
		return true
	}

	return false
}

// SetEnableOAuth gets a reference to the given bool and assigns it to the EnableOAuth field.
func (o *User) SetEnableOAuth(v bool) {
	o.EnableOAuth = &v
}

// GetEnable2FAAuth returns the Enable2FAAuth field value if set, zero value otherwise.
func (o *User) GetEnable2FAAuth() bool {
	if o == nil || IsNil(o.Enable2FAAuth) {
		var ret bool
		return ret
	}
	return *o.Enable2FAAuth
}

// GetEnable2FAAuthOk returns a tuple with the Enable2FAAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEnable2FAAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable2FAAuth) {
		return nil, false
	}
	return o.Enable2FAAuth, true
}

// HasEnable2FAAuth returns a boolean if a field has been set.
func (o *User) HasEnable2FAAuth() bool {
	if o != nil && !IsNil(o.Enable2FAAuth) {
		return true
	}

	return false
}

// SetEnable2FAAuth gets a reference to the given bool and assigns it to the Enable2FAAuth field.
func (o *User) SetEnable2FAAuth(v bool) {
	o.Enable2FAAuth = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *User) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *User) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *User) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *User) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *User) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *User) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if o.UnionID.IsSet() {
		toSerialize["unionID"] = o.UnionID.Get()
	}
	if o.NickName.IsSet() {
		toSerialize["nickName"] = o.NickName.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.Pwd.IsSet() {
		toSerialize["pwd"] = o.Pwd.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.EmailIsValid) {
		toSerialize["emailIsValid"] = o.EmailIsValid
	}
	if o.Phone.IsSet() {
		toSerialize["phone"] = o.Phone.Get()
	}
	if !IsNil(o.PhoneIsValid) {
		toSerialize["phoneIsValid"] = o.PhoneIsValid
	}
	if o.RelationChain.IsSet() {
		toSerialize["relationChain"] = o.RelationChain.Get()
	}
	if o.InterestTags.IsSet() {
		toSerialize["interestTags"] = o.InterestTags.Get()
	}
	if o.Biography.IsSet() {
		toSerialize["biography"] = o.Biography.Get()
	}
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	if o.Birthday.IsSet() {
		toSerialize["birthday"] = o.Birthday.Get()
	}
	if o.Occupation.IsSet() {
		toSerialize["occupation"] = o.Occupation.Get()
	}
	if o.Education.IsSet() {
		toSerialize["education"] = o.Education.Get()
	}
	if o.Contact.IsSet() {
		toSerialize["contact"] = o.Contact.Get()
	}
	if o.Languages.IsSet() {
		toSerialize["languages"] = o.Languages.Get()
	}
	if o.SocialLinks.IsSet() {
		toSerialize["socialLinks"] = o.SocialLinks.Get()
	}
	if o.RelationshipStatus.IsSet() {
		toSerialize["relationshipStatus"] = o.RelationshipStatus.Get()
	}
	if o.Company.IsSet() {
		toSerialize["company"] = o.Company.Get()
	}
	if o.Industry.IsSet() {
		toSerialize["industry"] = o.Industry.Get()
	}
	if o.CompanyPosition.IsSet() {
		toSerialize["companyPosition"] = o.CompanyPosition.Get()
	}
	if o.PrivateSettings.IsSet() {
		toSerialize["privateSettings"] = o.PrivateSettings.Get()
	}
	if !IsNil(o.IsLock) {
		toSerialize["isLock"] = o.IsLock
	}
	if !IsNil(o.LockUntil) {
		toSerialize["lockUntil"] = o.LockUntil
	}
	if !IsNil(o.EnableUserNameSignIn) {
		toSerialize["enableUserNameSignIn"] = o.EnableUserNameSignIn
	}
	if !IsNil(o.EnableEmailSignIn) {
		toSerialize["enableEmailSignIn"] = o.EnableEmailSignIn
	}
	if !IsNil(o.EnablePhoneSignIn) {
		toSerialize["enablePhoneSignIn"] = o.EnablePhoneSignIn
	}
	if !IsNil(o.EnableUnionIDSignIn) {
		toSerialize["enableUnionIDSignIn"] = o.EnableUnionIDSignIn
	}
	if !IsNil(o.EnableOAuth) {
		toSerialize["enableOAuth"] = o.EnableOAuth
	}
	if !IsNil(o.Enable2FAAuth) {
		toSerialize["enable2FAAuth"] = o.Enable2FAAuth
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


