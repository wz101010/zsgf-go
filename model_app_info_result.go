/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the AppInfoResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppInfoResult{}

// AppInfoResult struct for AppInfoResult
type AppInfoResult struct {
	Info *AppInfoItem `json:"info,omitempty"`
	Props []AppProperty `json:"props,omitempty"`
}

// NewAppInfoResult instantiates a new AppInfoResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfoResult() *AppInfoResult {
	this := AppInfoResult{}
	return &this
}

// NewAppInfoResultWithDefaults instantiates a new AppInfoResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoResultWithDefaults() *AppInfoResult {
	this := AppInfoResult{}
	return &this
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AppInfoResult) GetInfo() AppInfoItem {
	if o == nil || IsNil(o.Info) {
		var ret AppInfoItem
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoResult) GetInfoOk() (*AppInfoItem, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AppInfoResult) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given AppInfoItem and assigns it to the Info field.
func (o *AppInfoResult) SetInfo(v AppInfoItem) {
	o.Info = &v
}

// GetProps returns the Props field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInfoResult) GetProps() []AppProperty {
	if o == nil {
		var ret []AppProperty
		return ret
	}
	return o.Props
}

// GetPropsOk returns a tuple with the Props field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInfoResult) GetPropsOk() ([]AppProperty, bool) {
	if o == nil || IsNil(o.Props) {
		return nil, false
	}
	return o.Props, true
}

// HasProps returns a boolean if a field has been set.
func (o *AppInfoResult) HasProps() bool {
	if o != nil && !IsNil(o.Props) {
		return true
	}

	return false
}

// SetProps gets a reference to the given []AppProperty and assigns it to the Props field.
func (o *AppInfoResult) SetProps(v []AppProperty) {
	o.Props = v
}

func (o AppInfoResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppInfoResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if o.Props != nil {
		toSerialize["props"] = o.Props
	}
	return toSerialize, nil
}

type NullableAppInfoResult struct {
	value *AppInfoResult
	isSet bool
}

func (v NullableAppInfoResult) Get() *AppInfoResult {
	return v.value
}

func (v *NullableAppInfoResult) Set(val *AppInfoResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfoResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfoResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfoResult(val *AppInfoResult) *NullableAppInfoResult {
	return &NullableAppInfoResult{value: val, isSet: true}
}

func (v NullableAppInfoResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfoResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


