/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the TradeSettleDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TradeSettleDetail{}

// TradeSettleDetail struct for TradeSettleDetail
type TradeSettleDetail struct {
	Amount NullableString `json:"amount,omitempty"`
	OperationDt NullableString `json:"operationDt,omitempty"`
	OperationSerialNo NullableString `json:"operationSerialNo,omitempty"`
	OperationType NullableString `json:"operationType,omitempty"`
	OriTransIn NullableString `json:"oriTransIn,omitempty"`
	OriTransOut NullableString `json:"oriTransOut,omitempty"`
	TransIn NullableString `json:"transIn,omitempty"`
	TransOut NullableString `json:"transOut,omitempty"`
}

// NewTradeSettleDetail instantiates a new TradeSettleDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradeSettleDetail() *TradeSettleDetail {
	this := TradeSettleDetail{}
	return &this
}

// NewTradeSettleDetailWithDefaults instantiates a new TradeSettleDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeSettleDetailWithDefaults() *TradeSettleDetail {
	this := TradeSettleDetail{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetAmount() string {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret string
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableString and assigns it to the Amount field.
func (o *TradeSettleDetail) SetAmount(v string) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *TradeSettleDetail) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *TradeSettleDetail) UnsetAmount() {
	o.Amount.Unset()
}

// GetOperationDt returns the OperationDt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetOperationDt() string {
	if o == nil || IsNil(o.OperationDt.Get()) {
		var ret string
		return ret
	}
	return *o.OperationDt.Get()
}

// GetOperationDtOk returns a tuple with the OperationDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetOperationDtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationDt.Get(), o.OperationDt.IsSet()
}

// HasOperationDt returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasOperationDt() bool {
	if o != nil && o.OperationDt.IsSet() {
		return true
	}

	return false
}

// SetOperationDt gets a reference to the given NullableString and assigns it to the OperationDt field.
func (o *TradeSettleDetail) SetOperationDt(v string) {
	o.OperationDt.Set(&v)
}
// SetOperationDtNil sets the value for OperationDt to be an explicit nil
func (o *TradeSettleDetail) SetOperationDtNil() {
	o.OperationDt.Set(nil)
}

// UnsetOperationDt ensures that no value is present for OperationDt, not even an explicit nil
func (o *TradeSettleDetail) UnsetOperationDt() {
	o.OperationDt.Unset()
}

// GetOperationSerialNo returns the OperationSerialNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetOperationSerialNo() string {
	if o == nil || IsNil(o.OperationSerialNo.Get()) {
		var ret string
		return ret
	}
	return *o.OperationSerialNo.Get()
}

// GetOperationSerialNoOk returns a tuple with the OperationSerialNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetOperationSerialNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationSerialNo.Get(), o.OperationSerialNo.IsSet()
}

// HasOperationSerialNo returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasOperationSerialNo() bool {
	if o != nil && o.OperationSerialNo.IsSet() {
		return true
	}

	return false
}

// SetOperationSerialNo gets a reference to the given NullableString and assigns it to the OperationSerialNo field.
func (o *TradeSettleDetail) SetOperationSerialNo(v string) {
	o.OperationSerialNo.Set(&v)
}
// SetOperationSerialNoNil sets the value for OperationSerialNo to be an explicit nil
func (o *TradeSettleDetail) SetOperationSerialNoNil() {
	o.OperationSerialNo.Set(nil)
}

// UnsetOperationSerialNo ensures that no value is present for OperationSerialNo, not even an explicit nil
func (o *TradeSettleDetail) UnsetOperationSerialNo() {
	o.OperationSerialNo.Unset()
}

// GetOperationType returns the OperationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetOperationType() string {
	if o == nil || IsNil(o.OperationType.Get()) {
		var ret string
		return ret
	}
	return *o.OperationType.Get()
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationType.Get(), o.OperationType.IsSet()
}

// HasOperationType returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasOperationType() bool {
	if o != nil && o.OperationType.IsSet() {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given NullableString and assigns it to the OperationType field.
func (o *TradeSettleDetail) SetOperationType(v string) {
	o.OperationType.Set(&v)
}
// SetOperationTypeNil sets the value for OperationType to be an explicit nil
func (o *TradeSettleDetail) SetOperationTypeNil() {
	o.OperationType.Set(nil)
}

// UnsetOperationType ensures that no value is present for OperationType, not even an explicit nil
func (o *TradeSettleDetail) UnsetOperationType() {
	o.OperationType.Unset()
}

// GetOriTransIn returns the OriTransIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetOriTransIn() string {
	if o == nil || IsNil(o.OriTransIn.Get()) {
		var ret string
		return ret
	}
	return *o.OriTransIn.Get()
}

// GetOriTransInOk returns a tuple with the OriTransIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetOriTransInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriTransIn.Get(), o.OriTransIn.IsSet()
}

// HasOriTransIn returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasOriTransIn() bool {
	if o != nil && o.OriTransIn.IsSet() {
		return true
	}

	return false
}

// SetOriTransIn gets a reference to the given NullableString and assigns it to the OriTransIn field.
func (o *TradeSettleDetail) SetOriTransIn(v string) {
	o.OriTransIn.Set(&v)
}
// SetOriTransInNil sets the value for OriTransIn to be an explicit nil
func (o *TradeSettleDetail) SetOriTransInNil() {
	o.OriTransIn.Set(nil)
}

// UnsetOriTransIn ensures that no value is present for OriTransIn, not even an explicit nil
func (o *TradeSettleDetail) UnsetOriTransIn() {
	o.OriTransIn.Unset()
}

// GetOriTransOut returns the OriTransOut field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetOriTransOut() string {
	if o == nil || IsNil(o.OriTransOut.Get()) {
		var ret string
		return ret
	}
	return *o.OriTransOut.Get()
}

// GetOriTransOutOk returns a tuple with the OriTransOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetOriTransOutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriTransOut.Get(), o.OriTransOut.IsSet()
}

// HasOriTransOut returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasOriTransOut() bool {
	if o != nil && o.OriTransOut.IsSet() {
		return true
	}

	return false
}

// SetOriTransOut gets a reference to the given NullableString and assigns it to the OriTransOut field.
func (o *TradeSettleDetail) SetOriTransOut(v string) {
	o.OriTransOut.Set(&v)
}
// SetOriTransOutNil sets the value for OriTransOut to be an explicit nil
func (o *TradeSettleDetail) SetOriTransOutNil() {
	o.OriTransOut.Set(nil)
}

// UnsetOriTransOut ensures that no value is present for OriTransOut, not even an explicit nil
func (o *TradeSettleDetail) UnsetOriTransOut() {
	o.OriTransOut.Unset()
}

// GetTransIn returns the TransIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetTransIn() string {
	if o == nil || IsNil(o.TransIn.Get()) {
		var ret string
		return ret
	}
	return *o.TransIn.Get()
}

// GetTransInOk returns a tuple with the TransIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetTransInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransIn.Get(), o.TransIn.IsSet()
}

// HasTransIn returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasTransIn() bool {
	if o != nil && o.TransIn.IsSet() {
		return true
	}

	return false
}

// SetTransIn gets a reference to the given NullableString and assigns it to the TransIn field.
func (o *TradeSettleDetail) SetTransIn(v string) {
	o.TransIn.Set(&v)
}
// SetTransInNil sets the value for TransIn to be an explicit nil
func (o *TradeSettleDetail) SetTransInNil() {
	o.TransIn.Set(nil)
}

// UnsetTransIn ensures that no value is present for TransIn, not even an explicit nil
func (o *TradeSettleDetail) UnsetTransIn() {
	o.TransIn.Unset()
}

// GetTransOut returns the TransOut field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradeSettleDetail) GetTransOut() string {
	if o == nil || IsNil(o.TransOut.Get()) {
		var ret string
		return ret
	}
	return *o.TransOut.Get()
}

// GetTransOutOk returns a tuple with the TransOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradeSettleDetail) GetTransOutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransOut.Get(), o.TransOut.IsSet()
}

// HasTransOut returns a boolean if a field has been set.
func (o *TradeSettleDetail) HasTransOut() bool {
	if o != nil && o.TransOut.IsSet() {
		return true
	}

	return false
}

// SetTransOut gets a reference to the given NullableString and assigns it to the TransOut field.
func (o *TradeSettleDetail) SetTransOut(v string) {
	o.TransOut.Set(&v)
}
// SetTransOutNil sets the value for TransOut to be an explicit nil
func (o *TradeSettleDetail) SetTransOutNil() {
	o.TransOut.Set(nil)
}

// UnsetTransOut ensures that no value is present for TransOut, not even an explicit nil
func (o *TradeSettleDetail) UnsetTransOut() {
	o.TransOut.Unset()
}

func (o TradeSettleDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TradeSettleDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.OperationDt.IsSet() {
		toSerialize["operationDt"] = o.OperationDt.Get()
	}
	if o.OperationSerialNo.IsSet() {
		toSerialize["operationSerialNo"] = o.OperationSerialNo.Get()
	}
	if o.OperationType.IsSet() {
		toSerialize["operationType"] = o.OperationType.Get()
	}
	if o.OriTransIn.IsSet() {
		toSerialize["oriTransIn"] = o.OriTransIn.Get()
	}
	if o.OriTransOut.IsSet() {
		toSerialize["oriTransOut"] = o.OriTransOut.Get()
	}
	if o.TransIn.IsSet() {
		toSerialize["transIn"] = o.TransIn.Get()
	}
	if o.TransOut.IsSet() {
		toSerialize["transOut"] = o.TransOut.Get()
	}
	return toSerialize, nil
}

type NullableTradeSettleDetail struct {
	value *TradeSettleDetail
	isSet bool
}

func (v NullableTradeSettleDetail) Get() *TradeSettleDetail {
	return v.value
}

func (v *NullableTradeSettleDetail) Set(val *TradeSettleDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeSettleDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeSettleDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeSettleDetail(val *TradeSettleDetail) *NullableTradeSettleDetail {
	return &NullableTradeSettleDetail{value: val, isSet: true}
}

func (v NullableTradeSettleDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeSettleDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


