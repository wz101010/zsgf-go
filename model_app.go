/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
	"time"
)

// checks if the App type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &App{}

// App 应用
type App struct {
	// 唯一标识符
	Id *int64 `json:"id,omitempty"`
	// 用户 ID
	UserID *int64 `json:"userID,omitempty"`
	// 项目 ID
	ProjectID *int64 `json:"projectID,omitempty"`
	// 网站默认域名
	Website NullableString `json:"website,omitempty"`
	// 名称
	Name NullableString `json:"name,omitempty"`
	// Logo
	Logo NullableString `json:"logo,omitempty"`
	// 描述
	Description NullableString `json:"description,omitempty"`
	// 标签
	Tags NullableString `json:"tags,omitempty"`
	// 应用公钥
	AppKey NullableString `json:"appKey,omitempty"`
	// 应用私密密钥
	AppSecret NullableString `json:"appSecret,omitempty"`
	// 客户端密钥
	ClientSecret NullableString `json:"clientSecret,omitempty"`
	// SSH公钥
	SshPublickey NullableString `json:"sshPublickey,omitempty"`
	// 是否共享
	Share *bool `json:"share,omitempty"`
	// 创建时间
	CreateDate *time.Time `json:"createDate,omitempty"`
	// 最后更新时间
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
	// 是否显示
	Show *bool `json:"show,omitempty"`
	// 显示索引
	ShowIndex *int64 `json:"showIndex,omitempty"`
}

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp() *App {
	this := App{}
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *App) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *App) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *App) SetId(v int64) {
	o.Id = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *App) GetUserID() int64 {
	if o == nil || IsNil(o.UserID) {
		var ret int64
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetUserIDOk() (*int64, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *App) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given int64 and assigns it to the UserID field.
func (o *App) SetUserID(v int64) {
	o.UserID = &v
}

// GetProjectID returns the ProjectID field value if set, zero value otherwise.
func (o *App) GetProjectID() int64 {
	if o == nil || IsNil(o.ProjectID) {
		var ret int64
		return ret
	}
	return *o.ProjectID
}

// GetProjectIDOk returns a tuple with the ProjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetProjectIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ProjectID) {
		return nil, false
	}
	return o.ProjectID, true
}

// HasProjectID returns a boolean if a field has been set.
func (o *App) HasProjectID() bool {
	if o != nil && !IsNil(o.ProjectID) {
		return true
	}

	return false
}

// SetProjectID gets a reference to the given int64 and assigns it to the ProjectID field.
func (o *App) SetProjectID(v int64) {
	o.ProjectID = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetWebsite() string {
	if o == nil || IsNil(o.Website.Get()) {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *App) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *App) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *App) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *App) UnsetWebsite() {
	o.Website.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *App) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *App) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *App) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *App) UnsetName() {
	o.Name.Unset()
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *App) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *App) SetLogo(v string) {
	o.Logo.Set(&v)
}
// SetLogoNil sets the value for Logo to be an explicit nil
func (o *App) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *App) UnsetLogo() {
	o.Logo.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *App) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *App) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *App) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *App) UnsetDescription() {
	o.Description.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetTags() string {
	if o == nil || IsNil(o.Tags.Get()) {
		var ret string
		return ret
	}
	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// HasTags returns a boolean if a field has been set.
func (o *App) HasTags() bool {
	if o != nil && o.Tags.IsSet() {
		return true
	}

	return false
}

// SetTags gets a reference to the given NullableString and assigns it to the Tags field.
func (o *App) SetTags(v string) {
	o.Tags.Set(&v)
}
// SetTagsNil sets the value for Tags to be an explicit nil
func (o *App) SetTagsNil() {
	o.Tags.Set(nil)
}

// UnsetTags ensures that no value is present for Tags, not even an explicit nil
func (o *App) UnsetTags() {
	o.Tags.Unset()
}

// GetAppKey returns the AppKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetAppKey() string {
	if o == nil || IsNil(o.AppKey.Get()) {
		var ret string
		return ret
	}
	return *o.AppKey.Get()
}

// GetAppKeyOk returns a tuple with the AppKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetAppKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppKey.Get(), o.AppKey.IsSet()
}

// HasAppKey returns a boolean if a field has been set.
func (o *App) HasAppKey() bool {
	if o != nil && o.AppKey.IsSet() {
		return true
	}

	return false
}

// SetAppKey gets a reference to the given NullableString and assigns it to the AppKey field.
func (o *App) SetAppKey(v string) {
	o.AppKey.Set(&v)
}
// SetAppKeyNil sets the value for AppKey to be an explicit nil
func (o *App) SetAppKeyNil() {
	o.AppKey.Set(nil)
}

// UnsetAppKey ensures that no value is present for AppKey, not even an explicit nil
func (o *App) UnsetAppKey() {
	o.AppKey.Unset()
}

// GetAppSecret returns the AppSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetAppSecret() string {
	if o == nil || IsNil(o.AppSecret.Get()) {
		var ret string
		return ret
	}
	return *o.AppSecret.Get()
}

// GetAppSecretOk returns a tuple with the AppSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetAppSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppSecret.Get(), o.AppSecret.IsSet()
}

// HasAppSecret returns a boolean if a field has been set.
func (o *App) HasAppSecret() bool {
	if o != nil && o.AppSecret.IsSet() {
		return true
	}

	return false
}

// SetAppSecret gets a reference to the given NullableString and assigns it to the AppSecret field.
func (o *App) SetAppSecret(v string) {
	o.AppSecret.Set(&v)
}
// SetAppSecretNil sets the value for AppSecret to be an explicit nil
func (o *App) SetAppSecretNil() {
	o.AppSecret.Set(nil)
}

// UnsetAppSecret ensures that no value is present for AppSecret, not even an explicit nil
func (o *App) UnsetAppSecret() {
	o.AppSecret.Unset()
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret.Get()) {
		var ret string
		return ret
	}
	return *o.ClientSecret.Get()
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientSecret.Get(), o.ClientSecret.IsSet()
}

// HasClientSecret returns a boolean if a field has been set.
func (o *App) HasClientSecret() bool {
	if o != nil && o.ClientSecret.IsSet() {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given NullableString and assigns it to the ClientSecret field.
func (o *App) SetClientSecret(v string) {
	o.ClientSecret.Set(&v)
}
// SetClientSecretNil sets the value for ClientSecret to be an explicit nil
func (o *App) SetClientSecretNil() {
	o.ClientSecret.Set(nil)
}

// UnsetClientSecret ensures that no value is present for ClientSecret, not even an explicit nil
func (o *App) UnsetClientSecret() {
	o.ClientSecret.Unset()
}

// GetSshPublickey returns the SshPublickey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetSshPublickey() string {
	if o == nil || IsNil(o.SshPublickey.Get()) {
		var ret string
		return ret
	}
	return *o.SshPublickey.Get()
}

// GetSshPublickeyOk returns a tuple with the SshPublickey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetSshPublickeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshPublickey.Get(), o.SshPublickey.IsSet()
}

// HasSshPublickey returns a boolean if a field has been set.
func (o *App) HasSshPublickey() bool {
	if o != nil && o.SshPublickey.IsSet() {
		return true
	}

	return false
}

// SetSshPublickey gets a reference to the given NullableString and assigns it to the SshPublickey field.
func (o *App) SetSshPublickey(v string) {
	o.SshPublickey.Set(&v)
}
// SetSshPublickeyNil sets the value for SshPublickey to be an explicit nil
func (o *App) SetSshPublickeyNil() {
	o.SshPublickey.Set(nil)
}

// UnsetSshPublickey ensures that no value is present for SshPublickey, not even an explicit nil
func (o *App) UnsetSshPublickey() {
	o.SshPublickey.Unset()
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *App) GetShare() bool {
	if o == nil || IsNil(o.Share) {
		var ret bool
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetShareOk() (*bool, bool) {
	if o == nil || IsNil(o.Share) {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *App) HasShare() bool {
	if o != nil && !IsNil(o.Share) {
		return true
	}

	return false
}

// SetShare gets a reference to the given bool and assigns it to the Share field.
func (o *App) SetShare(v bool) {
	o.Share = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *App) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *App) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *App) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *App) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *App) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *App) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

// GetShow returns the Show field value if set, zero value otherwise.
func (o *App) GetShow() bool {
	if o == nil || IsNil(o.Show) {
		var ret bool
		return ret
	}
	return *o.Show
}

// GetShowOk returns a tuple with the Show field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetShowOk() (*bool, bool) {
	if o == nil || IsNil(o.Show) {
		return nil, false
	}
	return o.Show, true
}

// HasShow returns a boolean if a field has been set.
func (o *App) HasShow() bool {
	if o != nil && !IsNil(o.Show) {
		return true
	}

	return false
}

// SetShow gets a reference to the given bool and assigns it to the Show field.
func (o *App) SetShow(v bool) {
	o.Show = &v
}

// GetShowIndex returns the ShowIndex field value if set, zero value otherwise.
func (o *App) GetShowIndex() int64 {
	if o == nil || IsNil(o.ShowIndex) {
		var ret int64
		return ret
	}
	return *o.ShowIndex
}

// GetShowIndexOk returns a tuple with the ShowIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetShowIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.ShowIndex) {
		return nil, false
	}
	return o.ShowIndex, true
}

// HasShowIndex returns a boolean if a field has been set.
func (o *App) HasShowIndex() bool {
	if o != nil && !IsNil(o.ShowIndex) {
		return true
	}

	return false
}

// SetShowIndex gets a reference to the given int64 and assigns it to the ShowIndex field.
func (o *App) SetShowIndex(v int64) {
	o.ShowIndex = &v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o App) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if !IsNil(o.ProjectID) {
		toSerialize["projectID"] = o.ProjectID
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Tags.IsSet() {
		toSerialize["tags"] = o.Tags.Get()
	}
	if o.AppKey.IsSet() {
		toSerialize["appKey"] = o.AppKey.Get()
	}
	if o.AppSecret.IsSet() {
		toSerialize["appSecret"] = o.AppSecret.Get()
	}
	if o.ClientSecret.IsSet() {
		toSerialize["clientSecret"] = o.ClientSecret.Get()
	}
	if o.SshPublickey.IsSet() {
		toSerialize["sshPublickey"] = o.SshPublickey.Get()
	}
	if !IsNil(o.Share) {
		toSerialize["share"] = o.Share
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	if !IsNil(o.Show) {
		toSerialize["show"] = o.Show
	}
	if !IsNil(o.ShowIndex) {
		toSerialize["showIndex"] = o.ShowIndex
	}
	return toSerialize, nil
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


