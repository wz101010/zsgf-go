/*
全部  API 文档

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zsgf

import (
	"encoding/json"
)

// checks if the WechatJSConfigResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WechatJSConfigResult{}

// WechatJSConfigResult struct for WechatJSConfigResult
type WechatJSConfigResult struct {
	Noncestr NullableString `json:"noncestr,omitempty"`
	Timestamp NullableString `json:"timestamp,omitempty"`
	Signature NullableString `json:"signature,omitempty"`
	AppKey NullableString `json:"appKey,omitempty"`
	JsApiList []string `json:"jsApiList,omitempty"`
}

// NewWechatJSConfigResult instantiates a new WechatJSConfigResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWechatJSConfigResult() *WechatJSConfigResult {
	this := WechatJSConfigResult{}
	return &this
}

// NewWechatJSConfigResultWithDefaults instantiates a new WechatJSConfigResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWechatJSConfigResultWithDefaults() *WechatJSConfigResult {
	this := WechatJSConfigResult{}
	return &this
}

// GetNoncestr returns the Noncestr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WechatJSConfigResult) GetNoncestr() string {
	if o == nil || IsNil(o.Noncestr.Get()) {
		var ret string
		return ret
	}
	return *o.Noncestr.Get()
}

// GetNoncestrOk returns a tuple with the Noncestr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WechatJSConfigResult) GetNoncestrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Noncestr.Get(), o.Noncestr.IsSet()
}

// HasNoncestr returns a boolean if a field has been set.
func (o *WechatJSConfigResult) HasNoncestr() bool {
	if o != nil && o.Noncestr.IsSet() {
		return true
	}

	return false
}

// SetNoncestr gets a reference to the given NullableString and assigns it to the Noncestr field.
func (o *WechatJSConfigResult) SetNoncestr(v string) {
	o.Noncestr.Set(&v)
}
// SetNoncestrNil sets the value for Noncestr to be an explicit nil
func (o *WechatJSConfigResult) SetNoncestrNil() {
	o.Noncestr.Set(nil)
}

// UnsetNoncestr ensures that no value is present for Noncestr, not even an explicit nil
func (o *WechatJSConfigResult) UnsetNoncestr() {
	o.Noncestr.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WechatJSConfigResult) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WechatJSConfigResult) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WechatJSConfigResult) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *WechatJSConfigResult) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *WechatJSConfigResult) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *WechatJSConfigResult) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetSignature returns the Signature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WechatJSConfigResult) GetSignature() string {
	if o == nil || IsNil(o.Signature.Get()) {
		var ret string
		return ret
	}
	return *o.Signature.Get()
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WechatJSConfigResult) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signature.Get(), o.Signature.IsSet()
}

// HasSignature returns a boolean if a field has been set.
func (o *WechatJSConfigResult) HasSignature() bool {
	if o != nil && o.Signature.IsSet() {
		return true
	}

	return false
}

// SetSignature gets a reference to the given NullableString and assigns it to the Signature field.
func (o *WechatJSConfigResult) SetSignature(v string) {
	o.Signature.Set(&v)
}
// SetSignatureNil sets the value for Signature to be an explicit nil
func (o *WechatJSConfigResult) SetSignatureNil() {
	o.Signature.Set(nil)
}

// UnsetSignature ensures that no value is present for Signature, not even an explicit nil
func (o *WechatJSConfigResult) UnsetSignature() {
	o.Signature.Unset()
}

// GetAppKey returns the AppKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WechatJSConfigResult) GetAppKey() string {
	if o == nil || IsNil(o.AppKey.Get()) {
		var ret string
		return ret
	}
	return *o.AppKey.Get()
}

// GetAppKeyOk returns a tuple with the AppKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WechatJSConfigResult) GetAppKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppKey.Get(), o.AppKey.IsSet()
}

// HasAppKey returns a boolean if a field has been set.
func (o *WechatJSConfigResult) HasAppKey() bool {
	if o != nil && o.AppKey.IsSet() {
		return true
	}

	return false
}

// SetAppKey gets a reference to the given NullableString and assigns it to the AppKey field.
func (o *WechatJSConfigResult) SetAppKey(v string) {
	o.AppKey.Set(&v)
}
// SetAppKeyNil sets the value for AppKey to be an explicit nil
func (o *WechatJSConfigResult) SetAppKeyNil() {
	o.AppKey.Set(nil)
}

// UnsetAppKey ensures that no value is present for AppKey, not even an explicit nil
func (o *WechatJSConfigResult) UnsetAppKey() {
	o.AppKey.Unset()
}

// GetJsApiList returns the JsApiList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WechatJSConfigResult) GetJsApiList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.JsApiList
}

// GetJsApiListOk returns a tuple with the JsApiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WechatJSConfigResult) GetJsApiListOk() ([]string, bool) {
	if o == nil || IsNil(o.JsApiList) {
		return nil, false
	}
	return o.JsApiList, true
}

// HasJsApiList returns a boolean if a field has been set.
func (o *WechatJSConfigResult) HasJsApiList() bool {
	if o != nil && !IsNil(o.JsApiList) {
		return true
	}

	return false
}

// SetJsApiList gets a reference to the given []string and assigns it to the JsApiList field.
func (o *WechatJSConfigResult) SetJsApiList(v []string) {
	o.JsApiList = v
}

func (o WechatJSConfigResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WechatJSConfigResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Noncestr.IsSet() {
		toSerialize["noncestr"] = o.Noncestr.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Signature.IsSet() {
		toSerialize["signature"] = o.Signature.Get()
	}
	if o.AppKey.IsSet() {
		toSerialize["appKey"] = o.AppKey.Get()
	}
	if o.JsApiList != nil {
		toSerialize["jsApiList"] = o.JsApiList
	}
	return toSerialize, nil
}

type NullableWechatJSConfigResult struct {
	value *WechatJSConfigResult
	isSet bool
}

func (v NullableWechatJSConfigResult) Get() *WechatJSConfigResult {
	return v.value
}

func (v *NullableWechatJSConfigResult) Set(val *WechatJSConfigResult) {
	v.value = val
	v.isSet = true
}

func (v NullableWechatJSConfigResult) IsSet() bool {
	return v.isSet
}

func (v *NullableWechatJSConfigResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWechatJSConfigResult(val *WechatJSConfigResult) *NullableWechatJSConfigResult {
	return &NullableWechatJSConfigResult{value: val, isSet: true}
}

func (v NullableWechatJSConfigResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWechatJSConfigResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


